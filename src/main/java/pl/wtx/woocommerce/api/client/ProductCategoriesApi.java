/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.ProductCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductCategoriesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductCategoriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductCategoriesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProductCategory
     * @param productCategory Product category object with data to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCategoryCall(ProductCategory productCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCategory;

        // create path and map variables
        String localVarPath = "/products/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductCategoryValidateBeforeCall(ProductCategory productCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productCategory' is set
        if (productCategory == null) {
            throw new ApiException("Missing the required parameter 'productCategory' when calling createProductCategory(Async)");
        }

        return createProductCategoryCall(productCategory, _callback);

    }

    /**
     * This API helps you to create a new product category.
     * 
     * @param productCategory Product category object with data to create (required)
     * @return ProductCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCategory createProductCategory(ProductCategory productCategory) throws ApiException {
        ApiResponse<ProductCategory> localVarResp = createProductCategoryWithHttpInfo(productCategory);
        return localVarResp.getData();
    }

    /**
     * This API helps you to create a new product category.
     * 
     * @param productCategory Product category object with data to create (required)
     * @return ApiResponse&lt;ProductCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCategory> createProductCategoryWithHttpInfo(ProductCategory productCategory) throws ApiException {
        okhttp3.Call localVarCall = createProductCategoryValidateBeforeCall(productCategory, null);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to create a new product category. (asynchronously)
     * 
     * @param productCategory Product category object with data to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCategoryAsync(ProductCategory productCategory, final ApiCallback<ProductCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductCategoryValidateBeforeCall(productCategory, _callback);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductCategory
     * @param categoryId ID of product category to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product category deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCategoryCall(Integer categoryId, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductCategoryValidateBeforeCall(Integer categoryId, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteProductCategory(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteProductCategory(Async)");
        }

        return deleteProductCategoryCall(categoryId, force, _callback);

    }

    /**
     * This API helps you delete a product category.
     * 
     * @param categoryId ID of product category to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @return ProductCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product category deleted </td><td>  -  </td></tr>
     </table>
     */
    public ProductCategory deleteProductCategory(Integer categoryId, Boolean force) throws ApiException {
        ApiResponse<ProductCategory> localVarResp = deleteProductCategoryWithHttpInfo(categoryId, force);
        return localVarResp.getData();
    }

    /**
     * This API helps you delete a product category.
     * 
     * @param categoryId ID of product category to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @return ApiResponse&lt;ProductCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product category deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCategory> deleteProductCategoryWithHttpInfo(Integer categoryId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteProductCategoryValidateBeforeCall(categoryId, force, null);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you delete a product category. (asynchronously)
     * 
     * @param categoryId ID of product category to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product category deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCategoryAsync(Integer categoryId, Boolean force, final ApiCallback<ProductCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductCategoryValidateBeforeCall(categoryId, force, _callback);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllProductCategories
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent (optional)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product categories </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductCategoriesCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllProductCategoriesValidateBeforeCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback _callback) throws ApiException {
        return listAllProductCategoriesCall(context, page, perPage, search, exclude, include, order, orderby, hideEmpty, parent, product, slug, _callback);

    }

    /**
     * This API lets you retrieve all product categories.
     * 
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent (optional)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @return List&lt;ProductCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product categories </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductCategory> listAllProductCategories(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        ApiResponse<List<ProductCategory>> localVarResp = listAllProductCategoriesWithHttpInfo(context, page, perPage, search, exclude, include, order, orderby, hideEmpty, parent, product, slug);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve all product categories.
     * 
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent (optional)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @return ApiResponse&lt;List&lt;ProductCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product categories </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductCategory>> listAllProductCategoriesWithHttpInfo(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug) throws ApiException {
        okhttp3.Call localVarCall = listAllProductCategoriesValidateBeforeCall(context, page, perPage, search, exclude, include, order, orderby, hideEmpty, parent, product, slug, null);
        Type localVarReturnType = new TypeToken<List<ProductCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve all product categories. (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent (optional)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product categories </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductCategoriesAsync(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, String order, String orderby, Boolean hideEmpty, Integer parent, Integer product, String slug, final ApiCallback<List<ProductCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllProductCategoriesValidateBeforeCall(context, page, perPage, search, exclude, include, order, orderby, hideEmpty, parent, product, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ProductCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProductCategory
     * @param categoryId ID of product category to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductCategoryCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProductCategoryValidateBeforeCall(Integer categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling retrieveProductCategory(Async)");
        }

        return retrieveProductCategoryCall(categoryId, _callback);

    }

    /**
     * This API lets you retrieve a product category by ID.
     * 
     * @param categoryId ID of product category to return (required)
     * @return ProductCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCategory retrieveProductCategory(Integer categoryId) throws ApiException {
        ApiResponse<ProductCategory> localVarResp = retrieveProductCategoryWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve a product category by ID.
     * 
     * @param categoryId ID of product category to return (required)
     * @return ApiResponse&lt;ProductCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCategory> retrieveProductCategoryWithHttpInfo(Integer categoryId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProductCategoryValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve a product category by ID. (asynchronously)
     * 
     * @param categoryId ID of product category to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductCategoryAsync(Integer categoryId, final ApiCallback<ProductCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProductCategoryValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductCategory
     * @param categoryId ID of product category to update (required)
     * @param productCategory Product category object with data to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCategoryCall(Integer categoryId, ProductCategory productCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCategory;

        // create path and map variables
        String localVarPath = "/products/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductCategoryValidateBeforeCall(Integer categoryId, ProductCategory productCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateProductCategory(Async)");
        }

        // verify the required parameter 'productCategory' is set
        if (productCategory == null) {
            throw new ApiException("Missing the required parameter 'productCategory' when calling updateProductCategory(Async)");
        }

        return updateProductCategoryCall(categoryId, productCategory, _callback);

    }

    /**
     * This API lets you make changes to a product category.
     * 
     * @param categoryId ID of product category to update (required)
     * @param productCategory Product category object with data to update (required)
     * @return ProductCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductCategory updateProductCategory(Integer categoryId, ProductCategory productCategory) throws ApiException {
        ApiResponse<ProductCategory> localVarResp = updateProductCategoryWithHttpInfo(categoryId, productCategory);
        return localVarResp.getData();
    }

    /**
     * This API lets you make changes to a product category.
     * 
     * @param categoryId ID of product category to update (required)
     * @param productCategory Product category object with data to update (required)
     * @return ApiResponse&lt;ProductCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCategory> updateProductCategoryWithHttpInfo(Integer categoryId, ProductCategory productCategory) throws ApiException {
        okhttp3.Call localVarCall = updateProductCategoryValidateBeforeCall(categoryId, productCategory, null);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you make changes to a product category. (asynchronously)
     * 
     * @param categoryId ID of product category to update (required)
     * @param productCategory Product category object with data to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product category </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCategoryAsync(Integer categoryId, ProductCategory productCategory, final ApiCallback<ProductCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductCategoryValidateBeforeCall(categoryId, productCategory, _callback);
        Type localVarReturnType = new TypeToken<ProductCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
