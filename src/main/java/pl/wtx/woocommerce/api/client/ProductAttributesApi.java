/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.BatchUpdateProductAttributesRequest;
import pl.wtx.woocommerce.api.client.model.ProductAttribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductAttributesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductAttributesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductAttributesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchUpdateProductAttributes
     * @param batchUpdateProductAttributesRequest Batch create, update, delete product attributes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateProductAttributesCall(@javax.annotation.Nullable BatchUpdateProductAttributesRequest batchUpdateProductAttributesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUpdateProductAttributesRequest;

        // create path and map variables
        String localVarPath = "/products/attributes/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpdateProductAttributesValidateBeforeCall(@javax.annotation.Nullable BatchUpdateProductAttributesRequest batchUpdateProductAttributesRequest, final ApiCallback _callback) throws ApiException {
        return batchUpdateProductAttributesCall(batchUpdateProductAttributesRequest, _callback);

    }

    /**
     * Batch update product attributes
     * 
     * @param batchUpdateProductAttributesRequest Batch create, update, delete product attributes (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public Object batchUpdateProductAttributes(@javax.annotation.Nullable BatchUpdateProductAttributesRequest batchUpdateProductAttributesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = batchUpdateProductAttributesWithHttpInfo(batchUpdateProductAttributesRequest);
        return localVarResp.getData();
    }

    /**
     * Batch update product attributes
     * 
     * @param batchUpdateProductAttributesRequest Batch create, update, delete product attributes (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> batchUpdateProductAttributesWithHttpInfo(@javax.annotation.Nullable BatchUpdateProductAttributesRequest batchUpdateProductAttributesRequest) throws ApiException {
        okhttp3.Call localVarCall = batchUpdateProductAttributesValidateBeforeCall(batchUpdateProductAttributesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch update product attributes (asynchronously)
     * 
     * @param batchUpdateProductAttributesRequest Batch create, update, delete product attributes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateProductAttributesAsync(@javax.annotation.Nullable BatchUpdateProductAttributesRequest batchUpdateProductAttributesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpdateProductAttributesValidateBeforeCall(batchUpdateProductAttributesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProductAttribute
     * @param productAttribute Product attribute object with data to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAttributeCall(@javax.annotation.Nonnull ProductAttribute productAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productAttribute;

        // create path and map variables
        String localVarPath = "/products/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductAttributeValidateBeforeCall(@javax.annotation.Nonnull ProductAttribute productAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productAttribute' is set
        if (productAttribute == null) {
            throw new ApiException("Missing the required parameter 'productAttribute' when calling createProductAttribute(Async)");
        }

        return createProductAttributeCall(productAttribute, _callback);

    }

    /**
     * Create a product attribute
     * 
     * @param productAttribute Product attribute object with data to create (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product attribute </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute createProductAttribute(@javax.annotation.Nonnull ProductAttribute productAttribute) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = createProductAttributeWithHttpInfo(productAttribute);
        return localVarResp.getData();
    }

    /**
     * Create a product attribute
     * 
     * @param productAttribute Product attribute object with data to create (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product attribute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> createProductAttributeWithHttpInfo(@javax.annotation.Nonnull ProductAttribute productAttribute) throws ApiException {
        okhttp3.Call localVarCall = createProductAttributeValidateBeforeCall(productAttribute, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a product attribute (asynchronously)
     * 
     * @param productAttribute Product attribute object with data to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAttributeAsync(@javax.annotation.Nonnull ProductAttribute productAttribute, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductAttributeValidateBeforeCall(productAttribute, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductAttribute
     * @param attributeId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product attribute deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAttributeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductAttributeValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling deleteProductAttribute(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteProductAttribute(Async)");
        }

        return deleteProductAttributeCall(attributeId, force, _callback);

    }

    /**
     * Delete a product attribute
     * 
     * @param attributeId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product attribute deleted </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute deleteProductAttribute(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = deleteProductAttributeWithHttpInfo(attributeId, force);
        return localVarResp.getData();
    }

    /**
     * Delete a product attribute
     * 
     * @param attributeId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product attribute deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> deleteProductAttributeWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteProductAttributeValidateBeforeCall(attributeId, force, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a product attribute (asynchronously)
     * 
     * @param attributeId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product attribute deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAttributeAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Boolean force, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductAttributeValidateBeforeCall(attributeId, force, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllProductAttributes
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductAttributesCall(@javax.annotation.Nullable String context, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllProductAttributesValidateBeforeCall(@javax.annotation.Nullable String context, final ApiCallback _callback) throws ApiException {
        return listAllProductAttributesCall(context, _callback);

    }

    /**
     * List all product attributes
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @return List&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product attributes </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductAttribute> listAllProductAttributes(@javax.annotation.Nullable String context) throws ApiException {
        ApiResponse<List<ProductAttribute>> localVarResp = listAllProductAttributesWithHttpInfo(context);
        return localVarResp.getData();
    }

    /**
     * List all product attributes
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @return ApiResponse&lt;List&lt;ProductAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product attributes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductAttribute>> listAllProductAttributesWithHttpInfo(@javax.annotation.Nullable String context) throws ApiException {
        okhttp3.Call localVarCall = listAllProductAttributesValidateBeforeCall(context, null);
        Type localVarReturnType = new TypeToken<List<ProductAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all product attributes (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductAttributesAsync(@javax.annotation.Nullable String context, final ApiCallback<List<ProductAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllProductAttributesValidateBeforeCall(context, _callback);
        Type localVarReturnType = new TypeToken<List<ProductAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProductAttribute
     * @param attributeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductAttributeCall(@javax.annotation.Nonnull Integer attributeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProductAttributeValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling retrieveProductAttribute(Async)");
        }

        return retrieveProductAttributeCall(attributeId, _callback);

    }

    /**
     * Retrieve a product attribute
     * 
     * @param attributeId  (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product attribute </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute retrieveProductAttribute(@javax.annotation.Nonnull Integer attributeId) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = retrieveProductAttributeWithHttpInfo(attributeId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a product attribute
     * 
     * @param attributeId  (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product attribute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> retrieveProductAttributeWithHttpInfo(@javax.annotation.Nonnull Integer attributeId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProductAttributeValidateBeforeCall(attributeId, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a product attribute (asynchronously)
     * 
     * @param attributeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductAttributeAsync(@javax.annotation.Nonnull Integer attributeId, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProductAttributeValidateBeforeCall(attributeId, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductAttribute
     * @param attributeId  (required)
     * @param productAttribute Product attribute object with data to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAttributeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttribute productAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productAttribute;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductAttributeValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttribute productAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling updateProductAttribute(Async)");
        }

        // verify the required parameter 'productAttribute' is set
        if (productAttribute == null) {
            throw new ApiException("Missing the required parameter 'productAttribute' when calling updateProductAttribute(Async)");
        }

        return updateProductAttributeCall(attributeId, productAttribute, _callback);

    }

    /**
     * Update a product attribute
     * 
     * @param attributeId  (required)
     * @param productAttribute Product attribute object with data to update (required)
     * @return ProductAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product attribute </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttribute updateProductAttribute(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttribute productAttribute) throws ApiException {
        ApiResponse<ProductAttribute> localVarResp = updateProductAttributeWithHttpInfo(attributeId, productAttribute);
        return localVarResp.getData();
    }

    /**
     * Update a product attribute
     * 
     * @param attributeId  (required)
     * @param productAttribute Product attribute object with data to update (required)
     * @return ApiResponse&lt;ProductAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product attribute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttribute> updateProductAttributeWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttribute productAttribute) throws ApiException {
        okhttp3.Call localVarCall = updateProductAttributeValidateBeforeCall(attributeId, productAttribute, null);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a product attribute (asynchronously)
     * 
     * @param attributeId  (required)
     * @param productAttribute Product attribute object with data to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAttributeAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttribute productAttribute, final ApiCallback<ProductAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductAttributeValidateBeforeCall(attributeId, productAttribute, _callback);
        Type localVarReturnType = new TypeToken<ProductAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
