/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.BatchProductTags200Response;
import pl.wtx.woocommerce.api.client.model.BatchProductTagsRequest;
import pl.wtx.woocommerce.api.client.model.ProductTag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductTagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductTagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductTagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchProductTags
     * @param batchProductTagsRequest Batch create, update, and delete product tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchProductTagsCall(@javax.annotation.Nullable BatchProductTagsRequest batchProductTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchProductTagsRequest;

        // create path and map variables
        String localVarPath = "/products/tags/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchProductTagsValidateBeforeCall(@javax.annotation.Nullable BatchProductTagsRequest batchProductTagsRequest, final ApiCallback _callback) throws ApiException {
        return batchProductTagsCall(batchProductTagsRequest, _callback);

    }

    /**
     * Batch create, update, and delete product tags
     * 
     * @param batchProductTagsRequest Batch create, update, and delete product tags (optional)
     * @return BatchProductTags200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public BatchProductTags200Response batchProductTags(@javax.annotation.Nullable BatchProductTagsRequest batchProductTagsRequest) throws ApiException {
        ApiResponse<BatchProductTags200Response> localVarResp = batchProductTagsWithHttpInfo(batchProductTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Batch create, update, and delete product tags
     * 
     * @param batchProductTagsRequest Batch create, update, and delete product tags (optional)
     * @return ApiResponse&lt;BatchProductTags200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchProductTags200Response> batchProductTagsWithHttpInfo(@javax.annotation.Nullable BatchProductTagsRequest batchProductTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchProductTagsValidateBeforeCall(batchProductTagsRequest, null);
        Type localVarReturnType = new TypeToken<BatchProductTags200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch create, update, and delete product tags (asynchronously)
     * 
     * @param batchProductTagsRequest Batch create, update, and delete product tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchProductTagsAsync(@javax.annotation.Nullable BatchProductTagsRequest batchProductTagsRequest, final ApiCallback<BatchProductTags200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchProductTagsValidateBeforeCall(batchProductTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchProductTags200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProductTag
     * @param productTag Product tag object with data to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductTagCall(@javax.annotation.Nonnull ProductTag productTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productTag;

        // create path and map variables
        String localVarPath = "/products/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductTagValidateBeforeCall(@javax.annotation.Nonnull ProductTag productTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productTag' is set
        if (productTag == null) {
            throw new ApiException("Missing the required parameter 'productTag' when calling createProductTag(Async)");
        }

        return createProductTagCall(productTag, _callback);

    }

    /**
     * This API helps you to create a new product tag.
     * 
     * @param productTag Product tag object with data to create (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag createProductTag(@javax.annotation.Nonnull ProductTag productTag) throws ApiException {
        ApiResponse<ProductTag> localVarResp = createProductTagWithHttpInfo(productTag);
        return localVarResp.getData();
    }

    /**
     * This API helps you to create a new product tag.
     * 
     * @param productTag Product tag object with data to create (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> createProductTagWithHttpInfo(@javax.annotation.Nonnull ProductTag productTag) throws ApiException {
        okhttp3.Call localVarCall = createProductTagValidateBeforeCall(productTag, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to create a new product tag. (asynchronously)
     * 
     * @param productTag Product tag object with data to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductTagAsync(@javax.annotation.Nonnull ProductTag productTag, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductTagValidateBeforeCall(productTag, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductTag
     * @param tagId ID of product tag to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product tag deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductTagCall(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tags/{tagId}"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductTagValidateBeforeCall(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteProductTag(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteProductTag(Async)");
        }

        return deleteProductTagCall(tagId, force, _callback);

    }

    /**
     * This API helps you delete a product tag.
     * 
     * @param tagId ID of product tag to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product tag deleted </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag deleteProductTag(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        ApiResponse<ProductTag> localVarResp = deleteProductTagWithHttpInfo(tagId, force);
        return localVarResp.getData();
    }

    /**
     * This API helps you delete a product tag.
     * 
     * @param tagId ID of product tag to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product tag deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> deleteProductTagWithHttpInfo(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteProductTagValidateBeforeCall(tagId, force, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you delete a product tag. (asynchronously)
     * 
     * @param tagId ID of product tag to delete (required)
     * @param force Required to be true, as resource does not support trashing (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product tag deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductTagAsync(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull Boolean force, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductTagValidateBeforeCall(tagId, force, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllProductTags
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param offset Offset the result set by a specific number of items (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductTagsCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllProductTagsValidateBeforeCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, final ApiCallback _callback) throws ApiException {
        return listAllProductTagsCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, product, slug, _callback);

    }

    /**
     * This API lets you retrieve all product tags.
     * 
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param offset Offset the result set by a specific number of items (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @return List&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductTag> listAllProductTags(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug) throws ApiException {
        ApiResponse<List<ProductTag>> localVarResp = listAllProductTagsWithHttpInfo(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, product, slug);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve all product tags.
     * 
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param offset Offset the result set by a specific number of items (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @return ApiResponse&lt;List&lt;ProductTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductTag>> listAllProductTagsWithHttpInfo(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug) throws ApiException {
        okhttp3.Call localVarCall = listAllProductTagsValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, product, slug, null);
        Type localVarReturnType = new TypeToken<List<ProductTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve all product tags. (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response (optional, default to view)
     * @param page Current page of the collection (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set (optional, default to 10)
     * @param search Limit results to those matching a string (optional)
     * @param exclude Ensure result set excludes specific ids (optional)
     * @param include Limit result set to specific ids (optional)
     * @param offset Offset the result set by a specific number of items (optional)
     * @param order Order sort attribute ascending or descending (optional, default to asc)
     * @param orderby Sort collection by resource attribute (optional, default to name)
     * @param hideEmpty Whether to hide resources not assigned to any products (optional, default to false)
     * @param product Limit result set to resources assigned to a specific product (optional)
     * @param slug Limit result set to resources with a specific slug (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product tags </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductTagsAsync(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, final ApiCallback<List<ProductTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllProductTagsValidateBeforeCall(context, page, perPage, search, exclude, include, offset, order, orderby, hideEmpty, product, slug, _callback);
        Type localVarReturnType = new TypeToken<List<ProductTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProductTag
     * @param tagId ID of product tag to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductTagCall(@javax.annotation.Nonnull Integer tagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tags/{tagId}"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProductTagValidateBeforeCall(@javax.annotation.Nonnull Integer tagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling retrieveProductTag(Async)");
        }

        return retrieveProductTagCall(tagId, _callback);

    }

    /**
     * This API lets you retrieve a product tag by ID.
     * 
     * @param tagId ID of product tag to return (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag retrieveProductTag(@javax.annotation.Nonnull Integer tagId) throws ApiException {
        ApiResponse<ProductTag> localVarResp = retrieveProductTagWithHttpInfo(tagId);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve a product tag by ID.
     * 
     * @param tagId ID of product tag to return (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> retrieveProductTagWithHttpInfo(@javax.annotation.Nonnull Integer tagId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProductTagValidateBeforeCall(tagId, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve a product tag by ID. (asynchronously)
     * 
     * @param tagId ID of product tag to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductTagAsync(@javax.annotation.Nonnull Integer tagId, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProductTagValidateBeforeCall(tagId, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductTag
     * @param tagId ID of product tag to update (required)
     * @param productTag Product tag object with data to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductTagCall(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull ProductTag productTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productTag;

        // create path and map variables
        String localVarPath = "/products/tags/{tagId}"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductTagValidateBeforeCall(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull ProductTag productTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling updateProductTag(Async)");
        }

        // verify the required parameter 'productTag' is set
        if (productTag == null) {
            throw new ApiException("Missing the required parameter 'productTag' when calling updateProductTag(Async)");
        }

        return updateProductTagCall(tagId, productTag, _callback);

    }

    /**
     * This API lets you make changes to a product tag.
     * 
     * @param tagId ID of product tag to update (required)
     * @param productTag Product tag object with data to update (required)
     * @return ProductTag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProductTag updateProductTag(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull ProductTag productTag) throws ApiException {
        ApiResponse<ProductTag> localVarResp = updateProductTagWithHttpInfo(tagId, productTag);
        return localVarResp.getData();
    }

    /**
     * This API lets you make changes to a product tag.
     * 
     * @param tagId ID of product tag to update (required)
     * @param productTag Product tag object with data to update (required)
     * @return ApiResponse&lt;ProductTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTag> updateProductTagWithHttpInfo(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull ProductTag productTag) throws ApiException {
        okhttp3.Call localVarCall = updateProductTagValidateBeforeCall(tagId, productTag, null);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you make changes to a product tag. (asynchronously)
     * 
     * @param tagId ID of product tag to update (required)
     * @param productTag Product tag object with data to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product tag </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductTagAsync(@javax.annotation.Nonnull Integer tagId, @javax.annotation.Nonnull ProductTag productTag, final ApiCallback<ProductTag> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductTagValidateBeforeCall(tagId, productTag, _callback);
        Type localVarReturnType = new TypeToken<ProductTag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
