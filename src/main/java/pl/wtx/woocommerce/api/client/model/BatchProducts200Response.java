/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import pl.wtx.woocommerce.api.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.woocommerce.api.client.invoker.JSON;

/**
 * BatchProducts200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class BatchProducts200Response {
  public static final String SERIALIZED_NAME_CREATE = "create";
  @SerializedName(SERIALIZED_NAME_CREATE)
  @javax.annotation.Nullable
  private List<Product> create = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  @javax.annotation.Nullable
  private List<Product> update = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  @javax.annotation.Nullable
  private List<Product> delete = new ArrayList<>();

  public BatchProducts200Response() {
  }

  public BatchProducts200Response create(@javax.annotation.Nullable List<Product> create) {
    this.create = create;
    return this;
  }

  public BatchProducts200Response addCreateItem(Product createItem) {
    if (this.create == null) {
      this.create = new ArrayList<>();
    }
    this.create.add(createItem);
    return this;
  }

  /**
   * Get create
   * @return create
   */
  @javax.annotation.Nullable
  public List<Product> getCreate() {
    return create;
  }

  public void setCreate(@javax.annotation.Nullable List<Product> create) {
    this.create = create;
  }


  public BatchProducts200Response update(@javax.annotation.Nullable List<Product> update) {
    this.update = update;
    return this;
  }

  public BatchProducts200Response addUpdateItem(Product updateItem) {
    if (this.update == null) {
      this.update = new ArrayList<>();
    }
    this.update.add(updateItem);
    return this;
  }

  /**
   * Get update
   * @return update
   */
  @javax.annotation.Nullable
  public List<Product> getUpdate() {
    return update;
  }

  public void setUpdate(@javax.annotation.Nullable List<Product> update) {
    this.update = update;
  }


  public BatchProducts200Response delete(@javax.annotation.Nullable List<Product> delete) {
    this.delete = delete;
    return this;
  }

  public BatchProducts200Response addDeleteItem(Product deleteItem) {
    if (this.delete == null) {
      this.delete = new ArrayList<>();
    }
    this.delete.add(deleteItem);
    return this;
  }

  /**
   * Get delete
   * @return delete
   */
  @javax.annotation.Nullable
  public List<Product> getDelete() {
    return delete;
  }

  public void setDelete(@javax.annotation.Nullable List<Product> delete) {
    this.delete = delete;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchProducts200Response batchProducts200Response = (BatchProducts200Response) o;
    return Objects.equals(this.create, batchProducts200Response.create) &&
        Objects.equals(this.update, batchProducts200Response.update) &&
        Objects.equals(this.delete, batchProducts200Response.delete);
  }

  @Override
  public int hashCode() {
    return Objects.hash(create, update, delete);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchProducts200Response {\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("create");
    openapiFields.add("update");
    openapiFields.add("delete");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchProducts200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchProducts200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchProducts200Response is not found in the empty JSON string", BatchProducts200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchProducts200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchProducts200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("create") != null && !jsonObj.get("create").isJsonNull()) {
        JsonArray jsonArraycreate = jsonObj.getAsJsonArray("create");
        if (jsonArraycreate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("create").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `create` to be an array in the JSON string but got `%s`", jsonObj.get("create").toString()));
          }

          // validate the optional field `create` (array)
          for (int i = 0; i < jsonArraycreate.size(); i++) {
            Product.validateJsonElement(jsonArraycreate.get(i));
          };
        }
      }
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        JsonArray jsonArrayupdate = jsonObj.getAsJsonArray("update");
        if (jsonArrayupdate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("update").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `update` to be an array in the JSON string but got `%s`", jsonObj.get("update").toString()));
          }

          // validate the optional field `update` (array)
          for (int i = 0; i < jsonArrayupdate.size(); i++) {
            Product.validateJsonElement(jsonArrayupdate.get(i));
          };
        }
      }
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) {
        JsonArray jsonArraydelete = jsonObj.getAsJsonArray("delete");
        if (jsonArraydelete != null) {
          // ensure the json data is an array
          if (!jsonObj.get("delete").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `delete` to be an array in the JSON string but got `%s`", jsonObj.get("delete").toString()));
          }

          // validate the optional field `delete` (array)
          for (int i = 0; i < jsonArraydelete.size(); i++) {
            Product.validateJsonElement(jsonArraydelete.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchProducts200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchProducts200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchProducts200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchProducts200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchProducts200Response>() {
           @Override
           public void write(JsonWriter out, BatchProducts200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchProducts200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchProducts200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchProducts200Response
   * @throws IOException if the JSON string is invalid with respect to BatchProducts200Response
   */
  public static BatchProducts200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchProducts200Response.class);
  }

  /**
   * Convert an instance of BatchProducts200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

