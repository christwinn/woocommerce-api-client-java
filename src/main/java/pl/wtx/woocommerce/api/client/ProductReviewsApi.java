/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.ApiError;
import pl.wtx.woocommerce.api.client.model.BatchUpdateProductReviewsRequest;
import java.time.OffsetDateTime;
import pl.wtx.woocommerce.api.client.model.ProductReview;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductReviewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductReviewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductReviewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchUpdateProductReviews
     * @param batchUpdateProductReviewsRequest Batch create, update, delete product reviews (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateProductReviewsCall(@javax.annotation.Nullable BatchUpdateProductReviewsRequest batchUpdateProductReviewsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUpdateProductReviewsRequest;

        // create path and map variables
        String localVarPath = "/products/reviews/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpdateProductReviewsValidateBeforeCall(@javax.annotation.Nullable BatchUpdateProductReviewsRequest batchUpdateProductReviewsRequest, final ApiCallback _callback) throws ApiException {
        return batchUpdateProductReviewsCall(batchUpdateProductReviewsRequest, _callback);

    }

    /**
     * Batch update product reviews
     * 
     * @param batchUpdateProductReviewsRequest Batch create, update, delete product reviews (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public Object batchUpdateProductReviews(@javax.annotation.Nullable BatchUpdateProductReviewsRequest batchUpdateProductReviewsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = batchUpdateProductReviewsWithHttpInfo(batchUpdateProductReviewsRequest);
        return localVarResp.getData();
    }

    /**
     * Batch update product reviews
     * 
     * @param batchUpdateProductReviewsRequest Batch create, update, delete product reviews (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> batchUpdateProductReviewsWithHttpInfo(@javax.annotation.Nullable BatchUpdateProductReviewsRequest batchUpdateProductReviewsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchUpdateProductReviewsValidateBeforeCall(batchUpdateProductReviewsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch update product reviews (asynchronously)
     * 
     * @param batchUpdateProductReviewsRequest Batch create, update, delete product reviews (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateProductReviewsAsync(@javax.annotation.Nullable BatchUpdateProductReviewsRequest batchUpdateProductReviewsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpdateProductReviewsValidateBeforeCall(batchUpdateProductReviewsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProductReview
     * @param productReview Product review object with data to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product review </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductReviewCall(@javax.annotation.Nonnull ProductReview productReview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productReview;

        // create path and map variables
        String localVarPath = "/products/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductReviewValidateBeforeCall(@javax.annotation.Nonnull ProductReview productReview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productReview' is set
        if (productReview == null) {
            throw new ApiException("Missing the required parameter 'productReview' when calling createProductReview(Async)");
        }

        return createProductReviewCall(productReview, _callback);

    }

    /**
     * Create a product review
     * 
     * @param productReview Product review object with data to create (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product review </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview createProductReview(@javax.annotation.Nonnull ProductReview productReview) throws ApiException {
        ApiResponse<ProductReview> localVarResp = createProductReviewWithHttpInfo(productReview);
        return localVarResp.getData();
    }

    /**
     * Create a product review
     * 
     * @param productReview Product review object with data to create (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product review </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> createProductReviewWithHttpInfo(@javax.annotation.Nonnull ProductReview productReview) throws ApiException {
        okhttp3.Call localVarCall = createProductReviewValidateBeforeCall(productReview, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a product review (asynchronously)
     * 
     * @param productReview Product review object with data to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product review </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductReviewAsync(@javax.annotation.Nonnull ProductReview productReview, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductReviewValidateBeforeCall(productReview, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductReview
     * @param reviewId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product review deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductReviewCall(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductReviewValidateBeforeCall(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling deleteProductReview(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteProductReview(Async)");
        }

        return deleteProductReviewCall(reviewId, force, _callback);

    }

    /**
     * Delete a product review
     * 
     * @param reviewId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product review deleted </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview deleteProductReview(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        ApiResponse<ProductReview> localVarResp = deleteProductReviewWithHttpInfo(reviewId, force);
        return localVarResp.getData();
    }

    /**
     * Delete a product review
     * 
     * @param reviewId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product review deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> deleteProductReviewWithHttpInfo(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteProductReviewValidateBeforeCall(reviewId, force, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a product review (asynchronously)
     * 
     * @param reviewId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product review deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductReviewAsync(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull Boolean force, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductReviewValidateBeforeCall(reviewId, force, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllProductReviews
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to reviews published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by resource attribute. Options: date, date_gmt, id, slug, include and product. Default is date_gmt. (optional, default to date_gmt)
     * @param reviewer Ensure result set excludes specific IDs. (optional)
     * @param reviewerExclude Limit result set to specific IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs (optional)
     * @param status Limit result set to reviews assigned a specific status. Options: all, hold, approved, spam and trash. Default is approved. (optional, default to approved)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product reviews </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductReviewsCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> reviewer, @javax.annotation.Nullable List<Integer> reviewerExclude, @javax.annotation.Nullable List<Integer> reviewerEmail, @javax.annotation.Nullable List<Integer> product, @javax.annotation.Nullable String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (reviewer != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "reviewer", reviewer));
        }

        if (reviewerExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "reviewer_exclude", reviewerExclude));
        }

        if (reviewerEmail != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "reviewer_email", reviewerEmail));
        }

        if (product != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "product", product));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllProductReviewsValidateBeforeCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> reviewer, @javax.annotation.Nullable List<Integer> reviewerExclude, @javax.annotation.Nullable List<Integer> reviewerEmail, @javax.annotation.Nullable List<Integer> product, @javax.annotation.Nullable String status, final ApiCallback _callback) throws ApiException {
        return listAllProductReviewsCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status, _callback);

    }

    /**
     * List all product reviews
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to reviews published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by resource attribute. Options: date, date_gmt, id, slug, include and product. Default is date_gmt. (optional, default to date_gmt)
     * @param reviewer Ensure result set excludes specific IDs. (optional)
     * @param reviewerExclude Limit result set to specific IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs (optional)
     * @param status Limit result set to reviews assigned a specific status. Options: all, hold, approved, spam and trash. Default is approved. (optional, default to approved)
     * @return List&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product reviews </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductReview> listAllProductReviews(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> reviewer, @javax.annotation.Nullable List<Integer> reviewerExclude, @javax.annotation.Nullable List<Integer> reviewerEmail, @javax.annotation.Nullable List<Integer> product, @javax.annotation.Nullable String status) throws ApiException {
        ApiResponse<List<ProductReview>> localVarResp = listAllProductReviewsWithHttpInfo(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status);
        return localVarResp.getData();
    }

    /**
     * List all product reviews
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to reviews published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by resource attribute. Options: date, date_gmt, id, slug, include and product. Default is date_gmt. (optional, default to date_gmt)
     * @param reviewer Ensure result set excludes specific IDs. (optional)
     * @param reviewerExclude Limit result set to specific IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs (optional)
     * @param status Limit result set to reviews assigned a specific status. Options: all, hold, approved, spam and trash. Default is approved. (optional, default to approved)
     * @return ApiResponse&lt;List&lt;ProductReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product reviews </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductReview>> listAllProductReviewsWithHttpInfo(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> reviewer, @javax.annotation.Nullable List<Integer> reviewerExclude, @javax.annotation.Nullable List<Integer> reviewerEmail, @javax.annotation.Nullable List<Integer> product, @javax.annotation.Nullable String status) throws ApiException {
        okhttp3.Call localVarCall = listAllProductReviewsValidateBeforeCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status, null);
        Type localVarReturnType = new TypeToken<List<ProductReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all product reviews (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to reviews published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to reviews published before a given ISO8601 compliant date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by resource attribute. Options: date, date_gmt, id, slug, include and product. Default is date_gmt. (optional, default to date_gmt)
     * @param reviewer Ensure result set excludes specific IDs. (optional)
     * @param reviewerExclude Limit result set to specific IDs. (optional)
     * @param reviewerEmail Limit result set to that from a specific author email. (optional)
     * @param product Limit result set to reviews assigned to specific product IDs (optional)
     * @param status Limit result set to reviews assigned a specific status. Options: all, hold, approved, spam and trash. Default is approved. (optional, default to approved)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of product reviews </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductReviewsAsync(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> reviewer, @javax.annotation.Nullable List<Integer> reviewerExclude, @javax.annotation.Nullable List<Integer> reviewerEmail, @javax.annotation.Nullable List<Integer> product, @javax.annotation.Nullable String status, final ApiCallback<List<ProductReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllProductReviewsValidateBeforeCall(context, page, perPage, search, after, before, exclude, include, offset, order, orderby, reviewer, reviewerExclude, reviewerEmail, product, status, _callback);
        Type localVarReturnType = new TypeToken<List<ProductReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProductReview
     * @param reviewId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product review </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductReviewCall(@javax.annotation.Nonnull Integer reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProductReviewValidateBeforeCall(@javax.annotation.Nonnull Integer reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling retrieveProductReview(Async)");
        }

        return retrieveProductReviewCall(reviewId, _callback);

    }

    /**
     * Retrieve a product review
     * 
     * @param reviewId  (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product review </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview retrieveProductReview(@javax.annotation.Nonnull Integer reviewId) throws ApiException {
        ApiResponse<ProductReview> localVarResp = retrieveProductReviewWithHttpInfo(reviewId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a product review
     * 
     * @param reviewId  (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product review </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> retrieveProductReviewWithHttpInfo(@javax.annotation.Nonnull Integer reviewId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProductReviewValidateBeforeCall(reviewId, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a product review (asynchronously)
     * 
     * @param reviewId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product review </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductReviewAsync(@javax.annotation.Nonnull Integer reviewId, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProductReviewValidateBeforeCall(reviewId, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductReview
     * @param reviewId  (required)
     * @param productReview Product review object with data to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product review </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductReviewCall(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull ProductReview productReview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productReview;

        // create path and map variables
        String localVarPath = "/products/reviews/{reviewId}"
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductReviewValidateBeforeCall(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull ProductReview productReview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling updateProductReview(Async)");
        }

        // verify the required parameter 'productReview' is set
        if (productReview == null) {
            throw new ApiException("Missing the required parameter 'productReview' when calling updateProductReview(Async)");
        }

        return updateProductReviewCall(reviewId, productReview, _callback);

    }

    /**
     * Update a product review
     * 
     * @param reviewId  (required)
     * @param productReview Product review object with data to update (required)
     * @return ProductReview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product review </td><td>  -  </td></tr>
     </table>
     */
    public ProductReview updateProductReview(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull ProductReview productReview) throws ApiException {
        ApiResponse<ProductReview> localVarResp = updateProductReviewWithHttpInfo(reviewId, productReview);
        return localVarResp.getData();
    }

    /**
     * Update a product review
     * 
     * @param reviewId  (required)
     * @param productReview Product review object with data to update (required)
     * @return ApiResponse&lt;ProductReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product review </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReview> updateProductReviewWithHttpInfo(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull ProductReview productReview) throws ApiException {
        okhttp3.Call localVarCall = updateProductReviewValidateBeforeCall(reviewId, productReview, null);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a product review (asynchronously)
     * 
     * @param reviewId  (required)
     * @param productReview Product review object with data to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product review </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductReviewAsync(@javax.annotation.Nonnull Integer reviewId, @javax.annotation.Nonnull ProductReview productReview, final ApiCallback<ProductReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductReviewValidateBeforeCall(reviewId, productReview, _callback);
        Type localVarReturnType = new TypeToken<ProductReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
