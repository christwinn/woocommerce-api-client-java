/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.woocommerce.api.client.invoker.JSON;

/**
 * ProductReview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ProductReview {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private LocalDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_CREATED_GMT = "date_created_gmt";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED_GMT)
  @javax.annotation.Nullable
  private LocalDateTime dateCreatedGmt;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  @javax.annotation.Nullable
  private Integer productId;

  /**
   * Status of the review.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    APPROVED("approved"),

    HOLD("hold"),

    SPAM("spam"),

    UNSPAM("unspam"),

    TRASH("trash"),

    UNTRASH("untrash");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private StatusEnum status = StatusEnum.APPROVED;

  public static final String SERIALIZED_NAME_REVIEWER = "reviewer";
  @SerializedName(SERIALIZED_NAME_REVIEWER)
  @javax.annotation.Nullable
  private String reviewer;

  public static final String SERIALIZED_NAME_REVIEWER_EMAIL = "reviewer_email";
  @SerializedName(SERIALIZED_NAME_REVIEWER_EMAIL)
  @javax.annotation.Nullable
  private String reviewerEmail;

  public static final String SERIALIZED_NAME_REVIEW = "review";
  @SerializedName(SERIALIZED_NAME_REVIEW)
  @javax.annotation.Nullable
  private String review;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  @javax.annotation.Nullable
  private Integer rating;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  @javax.annotation.Nullable
  private Boolean verified;

  public ProductReview() {
  }

  public ProductReview(
     Integer id,
     LocalDateTime dateCreated,
     LocalDateTime dateCreatedGmt
  ) {
    this();
    this.id = id;
    this.dateCreated = dateCreated;
    this.dateCreatedGmt = dateCreatedGmt;
  }

  /**
   * Unique identifier for the resource.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * The date the review was created, in the site&#39;s timezone.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public LocalDateTime getDateCreated() {
    return dateCreated;
  }



  /**
   * The date the review was created, as GMT.
   * @return dateCreatedGmt
   */
  @javax.annotation.Nullable
  public LocalDateTime getDateCreatedGmt() {
    return dateCreatedGmt;
  }



  public ProductReview productId(@javax.annotation.Nullable Integer productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Unique identifier for the product that the review belongs to.
   * @return productId
   */
  @javax.annotation.Nullable
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(@javax.annotation.Nullable Integer productId) {
    this.productId = productId;
  }


  public ProductReview status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the review.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }


  public ProductReview reviewer(@javax.annotation.Nullable String reviewer) {
    this.reviewer = reviewer;
    return this;
  }

  /**
   * Reviewer name.
   * @return reviewer
   */
  @javax.annotation.Nullable
  public String getReviewer() {
    return reviewer;
  }

  public void setReviewer(@javax.annotation.Nullable String reviewer) {
    this.reviewer = reviewer;
  }


  public ProductReview reviewerEmail(@javax.annotation.Nullable String reviewerEmail) {
    this.reviewerEmail = reviewerEmail;
    return this;
  }

  /**
   * Reviewer email.
   * @return reviewerEmail
   */
  @javax.annotation.Nullable
  public String getReviewerEmail() {
    return reviewerEmail;
  }

  public void setReviewerEmail(@javax.annotation.Nullable String reviewerEmail) {
    this.reviewerEmail = reviewerEmail;
  }


  public ProductReview review(@javax.annotation.Nullable String review) {
    this.review = review;
    return this;
  }

  /**
   * The content of the review.
   * @return review
   */
  @javax.annotation.Nullable
  public String getReview() {
    return review;
  }

  public void setReview(@javax.annotation.Nullable String review) {
    this.review = review;
  }


  public ProductReview rating(@javax.annotation.Nullable Integer rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Review rating (0 to 5).
   * minimum: 0
   * maximum: 5
   * @return rating
   */
  @javax.annotation.Nullable
  public Integer getRating() {
    return rating;
  }

  public void setRating(@javax.annotation.Nullable Integer rating) {
    this.rating = rating;
  }


  public ProductReview verified(@javax.annotation.Nullable Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * Shows if the reviewer bought the product or not.
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(@javax.annotation.Nullable Boolean verified) {
    this.verified = verified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductReview productReview = (ProductReview) o;
    return Objects.equals(this.id, productReview.id) &&
        Objects.equals(this.dateCreated, productReview.dateCreated) &&
        Objects.equals(this.dateCreatedGmt, productReview.dateCreatedGmt) &&
        Objects.equals(this.productId, productReview.productId) &&
        Objects.equals(this.status, productReview.status) &&
        Objects.equals(this.reviewer, productReview.reviewer) &&
        Objects.equals(this.reviewerEmail, productReview.reviewerEmail) &&
        Objects.equals(this.review, productReview.review) &&
        Objects.equals(this.rating, productReview.rating) &&
        Objects.equals(this.verified, productReview.verified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dateCreated, dateCreatedGmt, productId, status, reviewer, reviewerEmail, review, rating, verified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductReview {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateCreatedGmt: ").append(toIndentedString(dateCreatedGmt)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reviewer: ").append(toIndentedString(reviewer)).append("\n");
    sb.append("    reviewerEmail: ").append(toIndentedString(reviewerEmail)).append("\n");
    sb.append("    review: ").append(toIndentedString(review)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("date_created");
    openapiFields.add("date_created_gmt");
    openapiFields.add("product_id");
    openapiFields.add("status");
    openapiFields.add("reviewer");
    openapiFields.add("reviewer_email");
    openapiFields.add("review");
    openapiFields.add("rating");
    openapiFields.add("verified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductReview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductReview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductReview is not found in the empty JSON string", ProductReview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductReview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductReview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("reviewer") != null && !jsonObj.get("reviewer").isJsonNull()) && !jsonObj.get("reviewer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewer").toString()));
      }
      if ((jsonObj.get("reviewer_email") != null && !jsonObj.get("reviewer_email").isJsonNull()) && !jsonObj.get("reviewer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewer_email").toString()));
      }
      if ((jsonObj.get("review") != null && !jsonObj.get("review").isJsonNull()) && !jsonObj.get("review").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductReview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductReview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductReview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductReview.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductReview>() {
           @Override
           public void write(JsonWriter out, ProductReview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductReview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductReview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductReview
   * @throws IOException if the JSON string is invalid with respect to ProductReview
   */
  public static ProductReview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductReview.class);
  }

  /**
   * Convert an instance of ProductReview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

