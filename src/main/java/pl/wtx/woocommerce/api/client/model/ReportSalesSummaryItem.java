/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.woocommerce.api.client.invoker.JSON;

/**
 * ReportSalesSummaryItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ReportSalesSummaryItem {
  public static final String SERIALIZED_NAME_SALES = "sales";
  @SerializedName(SERIALIZED_NAME_SALES)
  @javax.annotation.Nullable
  private String sales;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  @javax.annotation.Nullable
  private Integer orders;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  @javax.annotation.Nullable
  private Integer items;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  @javax.annotation.Nullable
  private String tax;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  @javax.annotation.Nullable
  private String shipping;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  @javax.annotation.Nullable
  private String discount;

  public static final String SERIALIZED_NAME_CUSTOMERS = "customers";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS)
  @javax.annotation.Nullable
  private Integer customers;

  public ReportSalesSummaryItem() {
  }

  public ReportSalesSummaryItem sales(@javax.annotation.Nullable String sales) {
    this.sales = sales;
    return this;
  }

  /**
   * Get sales
   * @return sales
   */
  @javax.annotation.Nullable
  public String getSales() {
    return sales;
  }

  public void setSales(@javax.annotation.Nullable String sales) {
    this.sales = sales;
  }


  public ReportSalesSummaryItem orders(@javax.annotation.Nullable Integer orders) {
    this.orders = orders;
    return this;
  }

  /**
   * Get orders
   * @return orders
   */
  @javax.annotation.Nullable
  public Integer getOrders() {
    return orders;
  }

  public void setOrders(@javax.annotation.Nullable Integer orders) {
    this.orders = orders;
  }


  public ReportSalesSummaryItem items(@javax.annotation.Nullable Integer items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public Integer getItems() {
    return items;
  }

  public void setItems(@javax.annotation.Nullable Integer items) {
    this.items = items;
  }


  public ReportSalesSummaryItem tax(@javax.annotation.Nullable String tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Get tax
   * @return tax
   */
  @javax.annotation.Nullable
  public String getTax() {
    return tax;
  }

  public void setTax(@javax.annotation.Nullable String tax) {
    this.tax = tax;
  }


  public ReportSalesSummaryItem shipping(@javax.annotation.Nullable String shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public String getShipping() {
    return shipping;
  }

  public void setShipping(@javax.annotation.Nullable String shipping) {
    this.shipping = shipping;
  }


  public ReportSalesSummaryItem discount(@javax.annotation.Nullable String discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public String getDiscount() {
    return discount;
  }

  public void setDiscount(@javax.annotation.Nullable String discount) {
    this.discount = discount;
  }


  public ReportSalesSummaryItem customers(@javax.annotation.Nullable Integer customers) {
    this.customers = customers;
    return this;
  }

  /**
   * Get customers
   * @return customers
   */
  @javax.annotation.Nullable
  public Integer getCustomers() {
    return customers;
  }

  public void setCustomers(@javax.annotation.Nullable Integer customers) {
    this.customers = customers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSalesSummaryItem reportSalesSummaryItem = (ReportSalesSummaryItem) o;
    return Objects.equals(this.sales, reportSalesSummaryItem.sales) &&
        Objects.equals(this.orders, reportSalesSummaryItem.orders) &&
        Objects.equals(this.items, reportSalesSummaryItem.items) &&
        Objects.equals(this.tax, reportSalesSummaryItem.tax) &&
        Objects.equals(this.shipping, reportSalesSummaryItem.shipping) &&
        Objects.equals(this.discount, reportSalesSummaryItem.discount) &&
        Objects.equals(this.customers, reportSalesSummaryItem.customers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sales, orders, items, tax, shipping, discount, customers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSalesSummaryItem {\n");
    sb.append("    sales: ").append(toIndentedString(sales)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sales");
    openapiFields.add("orders");
    openapiFields.add("items");
    openapiFields.add("tax");
    openapiFields.add("shipping");
    openapiFields.add("discount");
    openapiFields.add("customers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSalesSummaryItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSalesSummaryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSalesSummaryItem is not found in the empty JSON string", ReportSalesSummaryItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSalesSummaryItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSalesSummaryItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sales") != null && !jsonObj.get("sales").isJsonNull()) && !jsonObj.get("sales").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sales` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sales").toString()));
      }
      if ((jsonObj.get("tax") != null && !jsonObj.get("tax").isJsonNull()) && !jsonObj.get("tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax").toString()));
      }
      if ((jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) && !jsonObj.get("shipping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping").toString()));
      }
      if ((jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) && !jsonObj.get("discount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSalesSummaryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSalesSummaryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSalesSummaryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSalesSummaryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSalesSummaryItem>() {
           @Override
           public void write(JsonWriter out, ReportSalesSummaryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSalesSummaryItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSalesSummaryItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSalesSummaryItem
   * @throws IOException if the JSON string is invalid with respect to ReportSalesSummaryItem
   */
  public static ReportSalesSummaryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSalesSummaryItem.class);
  }

  /**
   * Convert an instance of ReportSalesSummaryItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

