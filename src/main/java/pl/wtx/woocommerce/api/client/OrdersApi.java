/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.ApiError;
import pl.wtx.woocommerce.api.client.model.BatchOrders200Response;
import pl.wtx.woocommerce.api.client.model.BatchOrdersRequest;
import java.time.OffsetDateTime;
import pl.wtx.woocommerce.api.client.model.Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchOrders
     * @param batchOrdersRequest Batch create, update, and delete orders (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchOrdersCall(@javax.annotation.Nullable BatchOrdersRequest batchOrdersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchOrdersRequest;

        // create path and map variables
        String localVarPath = "/orders/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchOrdersValidateBeforeCall(@javax.annotation.Nullable BatchOrdersRequest batchOrdersRequest, final ApiCallback _callback) throws ApiException {
        return batchOrdersCall(batchOrdersRequest, _callback);

    }

    /**
     * Batch create, update, and delete orders
     * 
     * @param batchOrdersRequest Batch create, update, and delete orders (optional)
     * @return BatchOrders200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public BatchOrders200Response batchOrders(@javax.annotation.Nullable BatchOrdersRequest batchOrdersRequest) throws ApiException {
        ApiResponse<BatchOrders200Response> localVarResp = batchOrdersWithHttpInfo(batchOrdersRequest);
        return localVarResp.getData();
    }

    /**
     * Batch create, update, and delete orders
     * 
     * @param batchOrdersRequest Batch create, update, and delete orders (optional)
     * @return ApiResponse&lt;BatchOrders200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchOrders200Response> batchOrdersWithHttpInfo(@javax.annotation.Nullable BatchOrdersRequest batchOrdersRequest) throws ApiException {
        okhttp3.Call localVarCall = batchOrdersValidateBeforeCall(batchOrdersRequest, null);
        Type localVarReturnType = new TypeToken<BatchOrders200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch create, update, and delete orders (asynchronously)
     * 
     * @param batchOrdersRequest Batch create, update, and delete orders (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch operation results </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchOrdersAsync(@javax.annotation.Nullable BatchOrdersRequest batchOrdersRequest, final ApiCallback<BatchOrders200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchOrdersValidateBeforeCall(batchOrdersRequest, _callback);
        Type localVarReturnType = new TypeToken<BatchOrders200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrder
     * @param order Order object with data to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(@javax.annotation.Nonnull Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(@javax.annotation.Nonnull Order order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling createOrder(Async)");
        }

        return createOrderCall(order, _callback);

    }

    /**
     * This API helps you to create a new order.
     * 
     * @param order Order object with data to create. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Order createOrder(@javax.annotation.Nonnull Order order) throws ApiException {
        ApiResponse<Order> localVarResp = createOrderWithHttpInfo(order);
        return localVarResp.getData();
    }

    /**
     * This API helps you to create a new order.
     * 
     * @param order Order object with data to create. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> createOrderWithHttpInfo(@javax.annotation.Nonnull Order order) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to create a new order. (asynchronously)
     * 
     * @param order Order object with data to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(@javax.annotation.Nonnull Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrderById
     * @param orderId ID of order to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderByIdCall(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderByIdValidateBeforeCall(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrderById(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteOrderById(Async)");
        }

        return deleteOrderByIdCall(orderId, force, _callback);

    }

    /**
     * This API helps you delete an order.
     * 
     * @param orderId ID of order to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Order deleteOrderById(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        ApiResponse<Order> localVarResp = deleteOrderByIdWithHttpInfo(orderId, force);
        return localVarResp.getData();
    }

    /**
     * This API helps you delete an order.
     * 
     * @param orderId ID of order to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> deleteOrderByIdWithHttpInfo(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderByIdValidateBeforeCall(orderId, force, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you delete an order. (asynchronously)
     * 
     * @param orderId ID of order to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderByIdAsync(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Boolean force, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderByIdValidateBeforeCall(orderId, force, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllOrders
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title and slug. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders assigned a specific status. Options: any, pending, processing, on-hold, completed, cancelled, refunded, failed and trash. Default is any. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. Default is 2. (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of orders. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllOrdersCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime modifiedAfter, @javax.annotation.Nullable OffsetDateTime modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable Integer customer, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable Integer dp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (parent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "parent", parent));
        }

        if (parentExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "parent_exclude", parentExclude));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (customer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer", customer));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (dp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dp", dp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllOrdersValidateBeforeCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime modifiedAfter, @javax.annotation.Nullable OffsetDateTime modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable Integer customer, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable Integer dp, final ApiCallback _callback) throws ApiException {
        return listAllOrdersCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp, _callback);

    }

    /**
     * This API helps you to view all the orders.
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title and slug. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders assigned a specific status. Options: any, pending, processing, on-hold, completed, cancelled, refunded, failed and trash. Default is any. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. Default is 2. (optional, default to 2)
     * @return List&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of orders. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<Order> listAllOrders(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime modifiedAfter, @javax.annotation.Nullable OffsetDateTime modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable Integer customer, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable Integer dp) throws ApiException {
        ApiResponse<List<Order>> localVarResp = listAllOrdersWithHttpInfo(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp);
        return localVarResp.getData();
    }

    /**
     * This API helps you to view all the orders.
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title and slug. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders assigned a specific status. Options: any, pending, processing, on-hold, completed, cancelled, refunded, failed and trash. Default is any. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. Default is 2. (optional, default to 2)
     * @return ApiResponse&lt;List&lt;Order&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of orders. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Order>> listAllOrdersWithHttpInfo(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime modifiedAfter, @javax.annotation.Nullable OffsetDateTime modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable Integer customer, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable Integer dp) throws ApiException {
        okhttp3.Call localVarCall = listAllOrdersValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp, null);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to view all the orders. (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title and slug. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param status Limit result set to orders assigned a specific status. Options: any, pending, processing, on-hold, completed, cancelled, refunded, failed and trash. Default is any. (optional)
     * @param customer Limit result set to orders assigned a specific customer. (optional)
     * @param product Limit result set to orders assigned a specific product. (optional)
     * @param dp Number of decimal points to use in each resource. Default is 2. (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of orders. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllOrdersAsync(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable OffsetDateTime after, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime modifiedAfter, @javax.annotation.Nullable OffsetDateTime modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable Integer customer, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable Integer dp, final ApiCallback<List<Order>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllOrdersValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, status, customer, product, dp, _callback);
        Type localVarReturnType = new TypeToken<List<Order>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveOrderById
     * @param orderId ID of order to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveOrderByIdCall(@javax.annotation.Nonnull Integer orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveOrderByIdValidateBeforeCall(@javax.annotation.Nonnull Integer orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling retrieveOrderById(Async)");
        }

        return retrieveOrderByIdCall(orderId, _callback);

    }

    /**
     * This API lets you retrieve and view a specific order.
     * 
     * @param orderId ID of order to return (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Order retrieveOrderById(@javax.annotation.Nonnull Integer orderId) throws ApiException {
        ApiResponse<Order> localVarResp = retrieveOrderByIdWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve and view a specific order.
     * 
     * @param orderId ID of order to return (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> retrieveOrderByIdWithHttpInfo(@javax.annotation.Nonnull Integer orderId) throws ApiException {
        okhttp3.Call localVarCall = retrieveOrderByIdValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve and view a specific order. (asynchronously)
     * 
     * @param orderId ID of order to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveOrderByIdAsync(@javax.annotation.Nonnull Integer orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveOrderByIdValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderById
     * @param orderId ID of order to update (required)
     * @param order Order object with data to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderByIdCall(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/orders/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderByIdValidateBeforeCall(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Order order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderById(Async)");
        }

        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling updateOrderById(Async)");
        }

        return updateOrderByIdCall(orderId, order, _callback);

    }

    /**
     * This API lets you make changes to an order.
     * 
     * @param orderId ID of order to update (required)
     * @param order Order object with data to update. (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Order updateOrderById(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Order order) throws ApiException {
        ApiResponse<Order> localVarResp = updateOrderByIdWithHttpInfo(orderId, order);
        return localVarResp.getData();
    }

    /**
     * This API lets you make changes to an order.
     * 
     * @param orderId ID of order to update (required)
     * @param order Order object with data to update. (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Order> updateOrderByIdWithHttpInfo(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Order order) throws ApiException {
        okhttp3.Call localVarCall = updateOrderByIdValidateBeforeCall(orderId, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you make changes to an order. (asynchronously)
     * 
     * @param orderId ID of order to update (required)
     * @param order Order object with data to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated order. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderByIdAsync(@javax.annotation.Nonnull Integer orderId, @javax.annotation.Nonnull Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderByIdValidateBeforeCall(orderId, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
