/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.ApiError;
import pl.wtx.woocommerce.api.client.model.Product;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProduct
     * @param product Product object with data to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(@javax.annotation.Nonnull Product product, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(@javax.annotation.Nonnull Product product, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling createProduct(Async)");
        }

        return createProductCall(product, _callback);

    }

    /**
     * This API helps you to create a new product.
     * 
     * @param product Product object with data to create. (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product createProduct(@javax.annotation.Nonnull Product product) throws ApiException {
        ApiResponse<Product> localVarResp = createProductWithHttpInfo(product);
        return localVarResp.getData();
    }

    /**
     * This API helps you to create a new product.
     * 
     * @param product Product object with data to create. (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> createProductWithHttpInfo(@javax.annotation.Nonnull Product product) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(product, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to create a new product. (asynchronously)
     * 
     * @param product Product object with data to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(@javax.annotation.Nonnull Product product, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(product, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProductById
     * @param productId ID of product to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductByIdCall(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductByIdValidateBeforeCall(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProductById(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteProductById(Async)");
        }

        return deleteProductByIdCall(productId, force, _callback);

    }

    /**
     * This API helps you delete a product.
     * 
     * @param productId ID of product to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product deleteProductById(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        ApiResponse<Product> localVarResp = deleteProductByIdWithHttpInfo(productId, force);
        return localVarResp.getData();
    }

    /**
     * This API helps you delete a product.
     * 
     * @param productId ID of product to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> deleteProductByIdWithHttpInfo(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteProductByIdValidateBeforeCall(productId, force, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you delete a product. (asynchronously)
     * 
     * @param productId ID of product to delete (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns deleted product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductByIdAsync(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Boolean force, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductByIdValidateBeforeCall(productId, force, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicateProduct
     * @param productId ID of product to duplicate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns newly duplicated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateProductCall(@javax.annotation.Nonnull Integer productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/duplicate"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateProductValidateBeforeCall(@javax.annotation.Nonnull Integer productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling duplicateProduct(Async)");
        }

        return duplicateProductCall(productId, _callback);

    }

    /**
     * This API helps you to duplicate a product.
     * 
     * @param productId ID of product to duplicate (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns newly duplicated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product duplicateProduct(@javax.annotation.Nonnull Integer productId) throws ApiException {
        ApiResponse<Product> localVarResp = duplicateProductWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * This API helps you to duplicate a product.
     * 
     * @param productId ID of product to duplicate (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns newly duplicated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> duplicateProductWithHttpInfo(@javax.annotation.Nonnull Integer productId) throws ApiException {
        okhttp3.Call localVarCall = duplicateProductValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to duplicate a product. (asynchronously)
     * 
     * @param productId ID of product to duplicate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns newly duplicated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateProductAsync(@javax.annotation.Nonnull Integer productId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateProductValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllProducts
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title, slug, price, popularity, rating, and menu_order. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. Options: any, draft, pending, private and publish. Default is any. (optional)
     * @param includeStatus Limit result set to products with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the status parameter. Options: any, future, trash, draft, pending, private, and publish. (optional)
     * @param excludeStatus Exclude products from result set with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_status parameter. Options: future, trash, draft, pending, private, and publish. (optional)
     * @param type Limit result set to products assigned a specific type. Options: simple, grouped, external and variable. (optional)
     * @param includeTypes Limit result set to products with any of the types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the type parameter. Options: simple, grouped, external and variable. (optional)
     * @param excludeTypes Exclude products from result set with any of the specified types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_types parameter. Options: simple, grouped, external and variable. (optional)
     * @param sku Limit result set to products with a specific SKU. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param taxClass Limit result set to products with a specific tax class. Default options: standard, reduced-rate and zero-rate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. Options: instock, outofstock and onbackorder. (optional)
     * @param virtual Limit result set to virtual products. (optional)
     * @param downloadable Limit result set to downloadable products. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of products. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductsCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String after, @javax.annotation.Nullable String before, @javax.annotation.Nullable String modifiedAfter, @javax.annotation.Nullable String modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable List<String> includeStatus, @javax.annotation.Nullable List<String> excludeStatus, @javax.annotation.Nullable String type, @javax.annotation.Nullable List<String> includeTypes, @javax.annotation.Nullable List<String> excludeTypes, @javax.annotation.Nullable String sku, @javax.annotation.Nullable Boolean featured, @javax.annotation.Nullable String category, @javax.annotation.Nullable String tag, @javax.annotation.Nullable String shippingClass, @javax.annotation.Nullable String attribute, @javax.annotation.Nullable String attributeTerm, @javax.annotation.Nullable String taxClass, @javax.annotation.Nullable Boolean onSale, @javax.annotation.Nullable String minPrice, @javax.annotation.Nullable String maxPrice, @javax.annotation.Nullable String stockStatus, @javax.annotation.Nullable Boolean virtual, @javax.annotation.Nullable Boolean downloadable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (modifiedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_after", modifiedAfter));
        }

        if (modifiedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_before", modifiedBefore));
        }

        if (datesAreGmt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates_are_gmt", datesAreGmt));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include", include));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (parent != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "parent", parent));
        }

        if (parentExclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "parent_exclude", parentExclude));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "status", status));
        }

        if (includeStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include_status", includeStatus));
        }

        if (excludeStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_status", excludeStatus));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (includeTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "include_types", includeTypes));
        }

        if (excludeTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "exclude_types", excludeTypes));
        }

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (shippingClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipping_class", shippingClass));
        }

        if (attribute != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute", attribute));
        }

        if (attributeTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_term", attributeTerm));
        }

        if (taxClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_class", taxClass));
        }

        if (onSale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("on_sale", onSale));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        if (stockStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stock_status", stockStatus));
        }

        if (virtual != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtual", virtual));
        }

        if (downloadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downloadable", downloadable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllProductsValidateBeforeCall(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String after, @javax.annotation.Nullable String before, @javax.annotation.Nullable String modifiedAfter, @javax.annotation.Nullable String modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable List<String> includeStatus, @javax.annotation.Nullable List<String> excludeStatus, @javax.annotation.Nullable String type, @javax.annotation.Nullable List<String> includeTypes, @javax.annotation.Nullable List<String> excludeTypes, @javax.annotation.Nullable String sku, @javax.annotation.Nullable Boolean featured, @javax.annotation.Nullable String category, @javax.annotation.Nullable String tag, @javax.annotation.Nullable String shippingClass, @javax.annotation.Nullable String attribute, @javax.annotation.Nullable String attributeTerm, @javax.annotation.Nullable String taxClass, @javax.annotation.Nullable Boolean onSale, @javax.annotation.Nullable String minPrice, @javax.annotation.Nullable String maxPrice, @javax.annotation.Nullable String stockStatus, @javax.annotation.Nullable Boolean virtual, @javax.annotation.Nullable Boolean downloadable, final ApiCallback _callback) throws ApiException {
        return listAllProductsCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, includeStatus, excludeStatus, type, includeTypes, excludeTypes, sku, featured, category, tag, shippingClass, attribute, attributeTerm, taxClass, onSale, minPrice, maxPrice, stockStatus, virtual, downloadable, _callback);

    }

    /**
     * This API helps you to view all the products.
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title, slug, price, popularity, rating, and menu_order. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. Options: any, draft, pending, private and publish. Default is any. (optional)
     * @param includeStatus Limit result set to products with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the status parameter. Options: any, future, trash, draft, pending, private, and publish. (optional)
     * @param excludeStatus Exclude products from result set with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_status parameter. Options: future, trash, draft, pending, private, and publish. (optional)
     * @param type Limit result set to products assigned a specific type. Options: simple, grouped, external and variable. (optional)
     * @param includeTypes Limit result set to products with any of the types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the type parameter. Options: simple, grouped, external and variable. (optional)
     * @param excludeTypes Exclude products from result set with any of the specified types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_types parameter. Options: simple, grouped, external and variable. (optional)
     * @param sku Limit result set to products with a specific SKU. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param taxClass Limit result set to products with a specific tax class. Default options: standard, reduced-rate and zero-rate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. Options: instock, outofstock and onbackorder. (optional)
     * @param virtual Limit result set to virtual products. (optional)
     * @param downloadable Limit result set to downloadable products. (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of products. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> listAllProducts(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String after, @javax.annotation.Nullable String before, @javax.annotation.Nullable String modifiedAfter, @javax.annotation.Nullable String modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable List<String> includeStatus, @javax.annotation.Nullable List<String> excludeStatus, @javax.annotation.Nullable String type, @javax.annotation.Nullable List<String> includeTypes, @javax.annotation.Nullable List<String> excludeTypes, @javax.annotation.Nullable String sku, @javax.annotation.Nullable Boolean featured, @javax.annotation.Nullable String category, @javax.annotation.Nullable String tag, @javax.annotation.Nullable String shippingClass, @javax.annotation.Nullable String attribute, @javax.annotation.Nullable String attributeTerm, @javax.annotation.Nullable String taxClass, @javax.annotation.Nullable Boolean onSale, @javax.annotation.Nullable String minPrice, @javax.annotation.Nullable String maxPrice, @javax.annotation.Nullable String stockStatus, @javax.annotation.Nullable Boolean virtual, @javax.annotation.Nullable Boolean downloadable) throws ApiException {
        ApiResponse<List<Product>> localVarResp = listAllProductsWithHttpInfo(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, includeStatus, excludeStatus, type, includeTypes, excludeTypes, sku, featured, category, tag, shippingClass, attribute, attributeTerm, taxClass, onSale, minPrice, maxPrice, stockStatus, virtual, downloadable);
        return localVarResp.getData();
    }

    /**
     * This API helps you to view all the products.
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title, slug, price, popularity, rating, and menu_order. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. Options: any, draft, pending, private and publish. Default is any. (optional)
     * @param includeStatus Limit result set to products with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the status parameter. Options: any, future, trash, draft, pending, private, and publish. (optional)
     * @param excludeStatus Exclude products from result set with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_status parameter. Options: future, trash, draft, pending, private, and publish. (optional)
     * @param type Limit result set to products assigned a specific type. Options: simple, grouped, external and variable. (optional)
     * @param includeTypes Limit result set to products with any of the types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the type parameter. Options: simple, grouped, external and variable. (optional)
     * @param excludeTypes Exclude products from result set with any of the specified types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_types parameter. Options: simple, grouped, external and variable. (optional)
     * @param sku Limit result set to products with a specific SKU. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param taxClass Limit result set to products with a specific tax class. Default options: standard, reduced-rate and zero-rate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. Options: instock, outofstock and onbackorder. (optional)
     * @param virtual Limit result set to virtual products. (optional)
     * @param downloadable Limit result set to downloadable products. (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of products. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> listAllProductsWithHttpInfo(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String after, @javax.annotation.Nullable String before, @javax.annotation.Nullable String modifiedAfter, @javax.annotation.Nullable String modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable List<String> includeStatus, @javax.annotation.Nullable List<String> excludeStatus, @javax.annotation.Nullable String type, @javax.annotation.Nullable List<String> includeTypes, @javax.annotation.Nullable List<String> excludeTypes, @javax.annotation.Nullable String sku, @javax.annotation.Nullable Boolean featured, @javax.annotation.Nullable String category, @javax.annotation.Nullable String tag, @javax.annotation.Nullable String shippingClass, @javax.annotation.Nullable String attribute, @javax.annotation.Nullable String attributeTerm, @javax.annotation.Nullable String taxClass, @javax.annotation.Nullable Boolean onSale, @javax.annotation.Nullable String minPrice, @javax.annotation.Nullable String maxPrice, @javax.annotation.Nullable String stockStatus, @javax.annotation.Nullable Boolean virtual, @javax.annotation.Nullable Boolean downloadable) throws ApiException {
        okhttp3.Call localVarCall = listAllProductsValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, includeStatus, excludeStatus, type, includeTypes, excludeTypes, sku, featured, category, tag, shippingClass, attribute, attributeTerm, taxClass, onSale, minPrice, maxPrice, stockStatus, virtual, downloadable, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to view all the products. (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param after Limit response to resources published after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources published before a given ISO8601 compliant date. (optional)
     * @param modifiedAfter Limit response to resources modified after a given ISO8601 compliant date. (optional)
     * @param modifiedBefore Limit response to resources modified before a given ISO8601 compliant date. (optional)
     * @param datesAreGmt Whether to consider GMT post dates when limiting response by published or modified date. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific ids. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is desc. (optional, default to desc)
     * @param orderby Sort collection by object attribute. Options: date, modified, id, include, title, slug, price, popularity, rating, and menu_order. Default is date. (optional, default to date)
     * @param parent Limit result set to those of particular parent IDs. (optional)
     * @param parentExclude Limit result set to all items except those of a particular parent ID. (optional)
     * @param slug Limit result set to products with a specific slug. (optional)
     * @param status Limit result set to products assigned a specific status. Options: any, draft, pending, private and publish. Default is any. (optional)
     * @param includeStatus Limit result set to products with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the status parameter. Options: any, future, trash, draft, pending, private, and publish. (optional)
     * @param excludeStatus Exclude products from result set with any of the specified statuses. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_status parameter. Options: future, trash, draft, pending, private, and publish. (optional)
     * @param type Limit result set to products assigned a specific type. Options: simple, grouped, external and variable. (optional)
     * @param includeTypes Limit result set to products with any of the types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the type parameter. Options: simple, grouped, external and variable. (optional)
     * @param excludeTypes Exclude products from result set with any of the specified types. Multiple statuses can be provided as a comma-separated list. Takes precedence over the include_types parameter. Options: simple, grouped, external and variable. (optional)
     * @param sku Limit result set to products with a specific SKU. (optional)
     * @param featured Limit result set to featured products. (optional)
     * @param category Limit result set to products assigned a specific category ID. (optional)
     * @param tag Limit result set to products assigned a specific tag ID. (optional)
     * @param shippingClass Limit result set to products assigned a specific shipping class ID. (optional)
     * @param attribute Limit result set to products with a specific attribute. (optional)
     * @param attributeTerm Limit result set to products with a specific attribute term ID (required an assigned attribute). (optional)
     * @param taxClass Limit result set to products with a specific tax class. Default options: standard, reduced-rate and zero-rate. (optional)
     * @param onSale Limit result set to products on sale. (optional)
     * @param minPrice Limit result set to products based on a minimum price. (optional)
     * @param maxPrice Limit result set to products based on a maximum price. (optional)
     * @param stockStatus Limit result set to products with specified stock status. Options: instock, outofstock and onbackorder. (optional)
     * @param virtual Limit result set to virtual products. (optional)
     * @param downloadable Limit result set to downloadable products. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of products. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllProductsAsync(@javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String after, @javax.annotation.Nullable String before, @javax.annotation.Nullable String modifiedAfter, @javax.annotation.Nullable String modifiedBefore, @javax.annotation.Nullable Boolean datesAreGmt, @javax.annotation.Nullable List<Integer> exclude, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable Integer offset, @javax.annotation.Nullable String order, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable List<Integer> parent, @javax.annotation.Nullable List<Integer> parentExclude, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<String> status, @javax.annotation.Nullable List<String> includeStatus, @javax.annotation.Nullable List<String> excludeStatus, @javax.annotation.Nullable String type, @javax.annotation.Nullable List<String> includeTypes, @javax.annotation.Nullable List<String> excludeTypes, @javax.annotation.Nullable String sku, @javax.annotation.Nullable Boolean featured, @javax.annotation.Nullable String category, @javax.annotation.Nullable String tag, @javax.annotation.Nullable String shippingClass, @javax.annotation.Nullable String attribute, @javax.annotation.Nullable String attributeTerm, @javax.annotation.Nullable String taxClass, @javax.annotation.Nullable Boolean onSale, @javax.annotation.Nullable String minPrice, @javax.annotation.Nullable String maxPrice, @javax.annotation.Nullable String stockStatus, @javax.annotation.Nullable Boolean virtual, @javax.annotation.Nullable Boolean downloadable, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllProductsValidateBeforeCall(context, page, perPage, search, after, before, modifiedAfter, modifiedBefore, datesAreGmt, exclude, include, offset, order, orderby, parent, parentExclude, slug, status, includeStatus, excludeStatus, type, includeTypes, excludeTypes, sku, featured, category, tag, shippingClass, attribute, attributeTerm, taxClass, onSale, minPrice, maxPrice, stockStatus, virtual, downloadable, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveProductById
     * @param productId ID of product to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductByIdCall(@javax.annotation.Nonnull Integer productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveProductByIdValidateBeforeCall(@javax.annotation.Nonnull Integer productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling retrieveProductById(Async)");
        }

        return retrieveProductByIdCall(productId, _callback);

    }

    /**
     * This API lets you retrieve and view a specific product by ID.
     * 
     * @param productId ID of product to return (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product retrieveProductById(@javax.annotation.Nonnull Integer productId) throws ApiException {
        ApiResponse<Product> localVarResp = retrieveProductByIdWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve and view a specific product by ID.
     * 
     * @param productId ID of product to return (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> retrieveProductByIdWithHttpInfo(@javax.annotation.Nonnull Integer productId) throws ApiException {
        okhttp3.Call localVarCall = retrieveProductByIdValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve and view a specific product by ID. (asynchronously)
     * 
     * @param productId ID of product to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveProductByIdAsync(@javax.annotation.Nonnull Integer productId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveProductByIdValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProductById
     * @param productId ID of product to update (required)
     * @param product Product object with data to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductByIdCall(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Product product, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = product;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductByIdValidateBeforeCall(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Product product, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProductById(Async)");
        }

        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling updateProductById(Async)");
        }

        return updateProductByIdCall(productId, product, _callback);

    }

    /**
     * This API lets you make changes to a product.
     * 
     * @param productId ID of product to update (required)
     * @param product Product object with data to update. (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Product updateProductById(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Product product) throws ApiException {
        ApiResponse<Product> localVarResp = updateProductByIdWithHttpInfo(productId, product);
        return localVarResp.getData();
    }

    /**
     * This API lets you make changes to a product.
     * 
     * @param productId ID of product to update (required)
     * @param product Product object with data to update. (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> updateProductByIdWithHttpInfo(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Product product) throws ApiException {
        okhttp3.Call localVarCall = updateProductByIdValidateBeforeCall(productId, product, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you make changes to a product. (asynchronously)
     * 
     * @param productId ID of product to update (required)
     * @param product Product object with data to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated product. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductByIdAsync(@javax.annotation.Nonnull Integer productId, @javax.annotation.Nonnull Product product, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductByIdValidateBeforeCall(productId, product, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
