/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.woocommerce.api.client;

import pl.wtx.woocommerce.api.client.invoker.ApiCallback;
import pl.wtx.woocommerce.api.client.invoker.ApiClient;
import pl.wtx.woocommerce.api.client.invoker.ApiException;
import pl.wtx.woocommerce.api.client.invoker.ApiResponse;
import pl.wtx.woocommerce.api.client.invoker.Configuration;
import pl.wtx.woocommerce.api.client.invoker.Pair;
import pl.wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import pl.wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.woocommerce.api.client.model.ApiError;
import pl.wtx.woocommerce.api.client.model.BatchUpdateAttributeTermsRequest;
import pl.wtx.woocommerce.api.client.model.ProductAttributeTerm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductAttributeTermsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductAttributeTermsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductAttributeTermsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchUpdateAttributeTerms
     * @param attributeId  (required)
     * @param batchUpdateAttributeTermsRequest Batch create, update, delete attribute terms (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateAttributeTermsCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable BatchUpdateAttributeTermsRequest batchUpdateAttributeTermsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUpdateAttributeTermsRequest;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}/terms/batch"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpdateAttributeTermsValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable BatchUpdateAttributeTermsRequest batchUpdateAttributeTermsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling batchUpdateAttributeTerms(Async)");
        }

        return batchUpdateAttributeTermsCall(attributeId, batchUpdateAttributeTermsRequest, _callback);

    }

    /**
     * Batch update attribute terms
     * 
     * @param attributeId  (required)
     * @param batchUpdateAttributeTermsRequest Batch create, update, delete attribute terms (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public Object batchUpdateAttributeTerms(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable BatchUpdateAttributeTermsRequest batchUpdateAttributeTermsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = batchUpdateAttributeTermsWithHttpInfo(attributeId, batchUpdateAttributeTermsRequest);
        return localVarResp.getData();
    }

    /**
     * Batch update attribute terms
     * 
     * @param attributeId  (required)
     * @param batchUpdateAttributeTermsRequest Batch create, update, delete attribute terms (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> batchUpdateAttributeTermsWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable BatchUpdateAttributeTermsRequest batchUpdateAttributeTermsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchUpdateAttributeTermsValidateBeforeCall(attributeId, batchUpdateAttributeTermsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch update attribute terms (asynchronously)
     * 
     * @param attributeId  (required)
     * @param batchUpdateAttributeTermsRequest Batch create, update, delete attribute terms (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns batch operation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateAttributeTermsAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable BatchUpdateAttributeTermsRequest batchUpdateAttributeTermsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpdateAttributeTermsValidateBeforeCall(attributeId, batchUpdateAttributeTermsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAttributeTerm
     * @param attributeId  (required)
     * @param productAttributeTerm Attribute term object with data to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created attribute term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttributeTermCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productAttributeTerm;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}/terms"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAttributeTermValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling createAttributeTerm(Async)");
        }

        // verify the required parameter 'productAttributeTerm' is set
        if (productAttributeTerm == null) {
            throw new ApiException("Missing the required parameter 'productAttributeTerm' when calling createAttributeTerm(Async)");
        }

        return createAttributeTermCall(attributeId, productAttributeTerm, _callback);

    }

    /**
     * Create an attribute term
     * 
     * @param attributeId  (required)
     * @param productAttributeTerm Attribute term object with data to create (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created attribute term </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm createAttributeTerm(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = createAttributeTermWithHttpInfo(attributeId, productAttributeTerm);
        return localVarResp.getData();
    }

    /**
     * Create an attribute term
     * 
     * @param attributeId  (required)
     * @param productAttributeTerm Attribute term object with data to create (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created attribute term </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> createAttributeTermWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm) throws ApiException {
        okhttp3.Call localVarCall = createAttributeTermValidateBeforeCall(attributeId, productAttributeTerm, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an attribute term (asynchronously)
     * 
     * @param attributeId  (required)
     * @param productAttributeTerm Attribute term object with data to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns created attribute term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAttributeTermAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAttributeTermValidateBeforeCall(attributeId, productAttributeTerm, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttributeTerm
     * @param attributeId  (required)
     * @param termId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attribute term deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttributeTermCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}/terms/{termId}"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()))
            .replace("{" + "termId" + "}", localVarApiClient.escapeString(termId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttributeTermValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling deleteAttributeTerm(Async)");
        }

        // verify the required parameter 'termId' is set
        if (termId == null) {
            throw new ApiException("Missing the required parameter 'termId' when calling deleteAttributeTerm(Async)");
        }

        // verify the required parameter 'force' is set
        if (force == null) {
            throw new ApiException("Missing the required parameter 'force' when calling deleteAttributeTerm(Async)");
        }

        return deleteAttributeTermCall(attributeId, termId, force, _callback);

    }

    /**
     * Delete an attribute term
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attribute term deleted </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm deleteAttributeTerm(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = deleteAttributeTermWithHttpInfo(attributeId, termId, force);
        return localVarResp.getData();
    }

    /**
     * Delete an attribute term
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attribute term deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> deleteAttributeTermWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteAttributeTermValidateBeforeCall(attributeId, termId, force, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an attribute term (asynchronously)
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param force Required to be true, as resource does not support trashing. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attribute term deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAttributeTermAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull Boolean force, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttributeTermValidateBeforeCall(attributeId, termId, force, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllAttributeTerms
     * @param attributeId  (required)
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param orderby Sort collection by resource attribute. Options: name, slug, term_group, description, count. Default is name. (optional, default to name)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is asc. (optional, default to asc)
     * @param hideEmpty Whether to hide resources not assigned to any products. Default is false. (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of attribute terms </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllAttributeTermsCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable String order, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer parent, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable List<Integer> exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}/terms"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (hideEmpty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hide_empty", hideEmpty));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (slug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("slug", slug));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAttributeTermsValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable String order, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer parent, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable List<Integer> exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling listAllAttributeTerms(Async)");
        }

        return listAllAttributeTermsCall(attributeId, context, page, perPage, search, orderby, order, hideEmpty, parent, product, slug, include, exclude, _callback);

    }

    /**
     * List all terms for a product attribute
     * 
     * @param attributeId  (required)
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param orderby Sort collection by resource attribute. Options: name, slug, term_group, description, count. Default is name. (optional, default to name)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is asc. (optional, default to asc)
     * @param hideEmpty Whether to hide resources not assigned to any products. Default is false. (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @return List&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of attribute terms </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductAttributeTerm> listAllAttributeTerms(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable String order, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer parent, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable List<Integer> exclude) throws ApiException {
        ApiResponse<List<ProductAttributeTerm>> localVarResp = listAllAttributeTermsWithHttpInfo(attributeId, context, page, perPage, search, orderby, order, hideEmpty, parent, product, slug, include, exclude);
        return localVarResp.getData();
    }

    /**
     * List all terms for a product attribute
     * 
     * @param attributeId  (required)
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param orderby Sort collection by resource attribute. Options: name, slug, term_group, description, count. Default is name. (optional, default to name)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is asc. (optional, default to asc)
     * @param hideEmpty Whether to hide resources not assigned to any products. Default is false. (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @return ApiResponse&lt;List&lt;ProductAttributeTerm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of attribute terms </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductAttributeTerm>> listAllAttributeTermsWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable String order, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer parent, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable List<Integer> exclude) throws ApiException {
        okhttp3.Call localVarCall = listAllAttributeTermsValidateBeforeCall(attributeId, context, page, perPage, search, orderby, order, hideEmpty, parent, product, slug, include, exclude, null);
        Type localVarReturnType = new TypeToken<List<ProductAttributeTerm>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all terms for a product attribute (asynchronously)
     * 
     * @param attributeId  (required)
     * @param context Scope under which the request is made; determines fields present in response. Options: view and edit. Default is view. (optional, default to view)
     * @param page Current page of the collection. Default is 1. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. Default is 10. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param orderby Sort collection by resource attribute. Options: name, slug, term_group, description, count. Default is name. (optional, default to name)
     * @param order Order sort attribute ascending or descending. Options: asc and desc. Default is asc. (optional, default to asc)
     * @param hideEmpty Whether to hide resources not assigned to any products. Default is false. (optional, default to false)
     * @param parent Limit result set to resources assigned to a specific parent. (optional)
     * @param product Limit result set to resources assigned to a specific product. (optional)
     * @param slug Limit result set to resources with a specific slug. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of attribute terms </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllAttributeTermsAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nullable String context, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer perPage, @javax.annotation.Nullable String search, @javax.annotation.Nullable String orderby, @javax.annotation.Nullable String order, @javax.annotation.Nullable Boolean hideEmpty, @javax.annotation.Nullable Integer parent, @javax.annotation.Nullable Integer product, @javax.annotation.Nullable String slug, @javax.annotation.Nullable List<Integer> include, @javax.annotation.Nullable List<Integer> exclude, final ApiCallback<List<ProductAttributeTerm>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAttributeTermsValidateBeforeCall(attributeId, context, page, perPage, search, orderby, order, hideEmpty, parent, product, slug, include, exclude, _callback);
        Type localVarReturnType = new TypeToken<List<ProductAttributeTerm>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAttributeTerm
     * @param attributeId  (required)
     * @param termId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified attribute term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAttributeTermCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}/terms/{termId}"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()))
            .replace("{" + "termId" + "}", localVarApiClient.escapeString(termId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAttributeTermValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling retrieveAttributeTerm(Async)");
        }

        // verify the required parameter 'termId' is set
        if (termId == null) {
            throw new ApiException("Missing the required parameter 'termId' when calling retrieveAttributeTerm(Async)");
        }

        return retrieveAttributeTermCall(attributeId, termId, _callback);

    }

    /**
     * Retrieve an attribute term
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified attribute term </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm retrieveAttributeTerm(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = retrieveAttributeTermWithHttpInfo(attributeId, termId);
        return localVarResp.getData();
    }

    /**
     * Retrieve an attribute term
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified attribute term </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> retrieveAttributeTermWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId) throws ApiException {
        okhttp3.Call localVarCall = retrieveAttributeTermValidateBeforeCall(attributeId, termId, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an attribute term (asynchronously)
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified attribute term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAttributeTermAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAttributeTermValidateBeforeCall(attributeId, termId, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAttributeTerm
     * @param attributeId  (required)
     * @param termId  (required)
     * @param productAttributeTerm Attribute term object with data to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated attribute term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttributeTermCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productAttributeTerm;

        // create path and map variables
        String localVarPath = "/products/attributes/{attributeId}/terms/{termId}"
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()))
            .replace("{" + "termId" + "}", localVarApiClient.escapeString(termId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttributeTermValidateBeforeCall(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling updateAttributeTerm(Async)");
        }

        // verify the required parameter 'termId' is set
        if (termId == null) {
            throw new ApiException("Missing the required parameter 'termId' when calling updateAttributeTerm(Async)");
        }

        // verify the required parameter 'productAttributeTerm' is set
        if (productAttributeTerm == null) {
            throw new ApiException("Missing the required parameter 'productAttributeTerm' when calling updateAttributeTerm(Async)");
        }

        return updateAttributeTermCall(attributeId, termId, productAttributeTerm, _callback);

    }

    /**
     * Update an attribute term
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param productAttributeTerm Attribute term object with data to update (required)
     * @return ProductAttributeTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated attribute term </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeTerm updateAttributeTerm(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm) throws ApiException {
        ApiResponse<ProductAttributeTerm> localVarResp = updateAttributeTermWithHttpInfo(attributeId, termId, productAttributeTerm);
        return localVarResp.getData();
    }

    /**
     * Update an attribute term
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param productAttributeTerm Attribute term object with data to update (required)
     * @return ApiResponse&lt;ProductAttributeTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated attribute term </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeTerm> updateAttributeTermWithHttpInfo(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm) throws ApiException {
        okhttp3.Call localVarCall = updateAttributeTermValidateBeforeCall(attributeId, termId, productAttributeTerm, null);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an attribute term (asynchronously)
     * 
     * @param attributeId  (required)
     * @param termId  (required)
     * @param productAttributeTerm Attribute term object with data to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns updated attribute term </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAttributeTermAsync(@javax.annotation.Nonnull Integer attributeId, @javax.annotation.Nonnull Integer termId, @javax.annotation.Nonnull ProductAttributeTerm productAttributeTerm, final ApiCallback<ProductAttributeTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttributeTermValidateBeforeCall(attributeId, termId, productAttributeTerm, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
