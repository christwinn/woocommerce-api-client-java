/*
 * Copyright (c) 2025.
 *
 * Crud+ ActionBuilder
 * Author: Chris Twinn
 * Licence: MIT Licence see LICENCE file
 * All Rights Reserved
 */

/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package uk.co.twinn.pl_wtx_woocommerce.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Objects;

import java.io.IOException;

import javax.annotation.Nullable;
import uk.co.twinn.api.woocommerce.core.JacksonObjectMapper;
import uk.co.twinn.api.woocommerce.response.core.ErrorMessage;

/**
 * ProductCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ProductCategory {
  public static final String SERIALIZED_NAME_ID = "id";
  //@SerializedName(SERIALIZED_NAME_ID)
  @Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  //@SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  //@SerializedName(SERIALIZED_NAME_SLUG)
  @Nullable
  private String slug;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  //@SerializedName(SERIALIZED_NAME_PARENT)
  @Nullable
  private Integer parent;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  //@SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @Nullable
  private String description;

  private ErrorMessage error; //batch notifier

  /**
   * Category archive display type.
   */
 // @JsonAdapter(DisplayEnum.Adapter.class)
  public enum DisplayEnum {
    DEFAULT("default"),

    PRODUCTS("products"),

    SUBCATEGORIES("subcategories"),

    BOTH("both");

    private final String value;

    DisplayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayEnum fromValue(String value) {
      for (DisplayEnum b : DisplayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

  }

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  //@SerializedName(SERIALIZED_NAME_DISPLAY)
  @Nullable
  private DisplayEnum display = DisplayEnum.DEFAULT;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  //@SerializedName(SERIALIZED_NAME_IMAGE)
  @Nullable
  private ProductImage image;

  public static final String SERIALIZED_NAME_MENU_ORDER = "menu_order";
  //@SerializedName(SERIALIZED_NAME_MENU_ORDER)
  @Nullable
  private Integer menuOrder;

  public static final String SERIALIZED_NAME_COUNT = "count";
  //@SerializedName(SERIALIZED_NAME_COUNT)
  @Nullable
  private Integer count;

  public ProductCategory() {
  }

  public ProductCategory(
     Integer id,
     Integer count
  ) {
    this();
    this.id = id;
    this.count = count;
  }

  /**
   * Unique identifier for the resource.
   * @return id
   */
  @Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull Integer id) {
        this.id = id;
    }

  public ProductCategory name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Category name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ProductCategory slug(@Nullable String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * An alphanumeric identifier for the resource unique to its type.
   * @return slug
   */
  @Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(@Nullable String slug) {
    this.slug = slug;
  }


  public ProductCategory parent(@Nullable Integer parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The ID for the parent of the resource.
   * @return parent
   */
  @Nullable
  public Integer getParent() {
    return parent;
  }

  public void setParent(@Nullable Integer parent) {
    this.parent = parent;
  }


  public ProductCategory description(@Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * HTML description of the resource.
   * @return description
   */
  @Nullable
  public String getDescription() {
    return description;
  }

  /**
   * WARNING:
   * <a href="https://github.com/woocommerce/woocommerce/issues/41240#issuecomment-2075127598">https://github.com/woocommerce/woocommerce/issues/41240#issuecomment-2075127598</a>
   *
   * WordPress strips HTML except below:
   *     [a] => Array
   *         (
   *             [href] => 1
   *             [title] => 1
   *         )
   *
   *     [abbr] => Array
   *         (
   *             [title] => 1
   *         )
   *
   *     [acronym] => Array
   *         (
   *             [title] => 1
   *         )
   *
   *     [b] => Array
   *         (
   *         )
   *
   *     [blockquote] => Array
   *         (
   *             [cite] => 1
   *         )
   *
   *     [cite] => Array
   *         (
   *         )
   *
   *     [code] => Array
   *         (
   *         )
   *
   *     [del] => Array
   *         (
   *             [datetime] => 1
   *         )
   *
   *     [em] => Array
   *         (
   *         )
   *
   *     [i] => Array
   *         (
   *         )
   *
   *     [q] => Array
   *         (
   *             [cite] => 1
   *         )
   *
   *     [s] => Array
   *         (
   *         )
   *
   *     [strike] => Array
   *         (
   *         )
   *
   *     [strong] => Array
   *         (
   *         )
   *
   **/
  public void setDescription(@Nullable String description) {
    this.description = description;
  }


  public ProductCategory display(@Nullable DisplayEnum display) {
    this.display = display;
    return this;
  }

  /**
   * Category archive display type.
   * @return display
   */
  @JsonIgnore
  @Nullable
  public DisplayEnum getDisplay() {
    return display;
  }

  @JsonProperty("display")
  public String getDisplayAsString() {
        if (display != null){
            return display.getValue();
        }else{
            return null;
        }
    }

  public void setDisplay(@Nullable DisplayEnum display) {
    this.display = display;
  }

  public void setDisplay(@Nullable String display) {

      if (this.display != null) {
          this.display = DisplayEnum.fromValue(display);
      }

    }


  public ProductCategory image(@Nullable ProductImage image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @Nullable
  public ProductImage getImage() {
    return image;
  }

  public void setImage(@Nullable ProductImage image) {
    this.image = image;
  }


  public ProductCategory menuOrder(@Nullable Integer menuOrder) {
    this.menuOrder = menuOrder;
    return this;
  }

  /**
   * Menu order, used to custom sort the resource.
   * @return menuOrder
   */
  @Nullable
  public Integer getMenuOrder() {
    return menuOrder;
  }

  @JsonProperty("menu_order")
  public void setMenuOrder(@Nullable Integer menuOrder) {
    this.menuOrder = menuOrder;
  }


  /**
   * Number of published products for the resource.
   * @return count
   */
  @Nullable
  public Integer getCount() {
    return count;
  }


    /**
     * When we batch the customers we retrieve a list of customers that have been created, updated, deleted
     * Within this list we may have record A as success and so no error
     * BUT record B may fail with exists, or something else.
     * Only way to catch the error and pass back is by adding the error message into here.
     */
    @Nullable
    public ErrorMessage getError() {
        return error;
    }

    @JsonProperty("error")
    public void setError(@Nullable ErrorMessage error) {
        this.error = error;
    }

    public boolean hasError() {
        return error != null;
    }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductCategory productCategory = (ProductCategory) o;
    return Objects.equals(this.id, productCategory.id) &&
        Objects.equals(this.name, productCategory.name) &&
        Objects.equals(this.slug, productCategory.slug) &&
        Objects.equals(this.parent, productCategory.parent) &&
        Objects.equals(this.description, productCategory.description) &&
        Objects.equals(this.display, productCategory.display) &&
        Objects.equals(this.image, productCategory.image) &&
        Objects.equals(this.menuOrder, productCategory.menuOrder) &&
        Objects.equals(this.count, productCategory.count);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, slug, parent, description, display, image, menuOrder, count);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductCategory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    menuOrder: ").append(toIndentedString(menuOrder)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  /**
   * Convert an instance of ProductCategory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
      return new JacksonObjectMapper().toJson(this);
  }
}

