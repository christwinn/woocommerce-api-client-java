/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package wtx.woocommerce.api.client;

import wtx.woocommerce.api.client.invoker.ApiCallback;
import wtx.woocommerce.api.client.invoker.ApiClient;
import wtx.woocommerce.api.client.invoker.ApiException;
import wtx.woocommerce.api.client.invoker.ApiResponse;
import wtx.woocommerce.api.client.invoker.Configuration;
import wtx.woocommerce.api.client.invoker.Pair;
import wtx.woocommerce.api.client.invoker.ProgressRequestBody;
import wtx.woocommerce.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import wtx.woocommerce.api.client.model.ApiError;
import wtx.woocommerce.api.client.model.Customer;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listAllCustomers
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param after Limit response to resources created after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources created before a given ISO8601 compliant date. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending (asc as default). (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email address. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllCustomersCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, OffsetDateTime after, OffsetDateTime before, Integer offset, String order, String orderby, String email, String role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (exclude != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "exclude", exclude));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllCustomersValidateBeforeCall(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, OffsetDateTime after, OffsetDateTime before, Integer offset, String order, String orderby, String email, String role, final ApiCallback _callback) throws ApiException {
        return listAllCustomersCall(context, page, perPage, search, exclude, include, after, before, offset, order, orderby, email, role, _callback);

    }

    /**
     * This API helps you to view all the customers.
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param after Limit response to resources created after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources created before a given ISO8601 compliant date. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending (asc as default). (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email address. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @return List&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Customer> listAllCustomers(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, OffsetDateTime after, OffsetDateTime before, Integer offset, String order, String orderby, String email, String role) throws ApiException {
        ApiResponse<List<Customer>> localVarResp = listAllCustomersWithHttpInfo(context, page, perPage, search, exclude, include, after, before, offset, order, orderby, email, role);
        return localVarResp.getData();
    }

    /**
     * This API helps you to view all the customers.
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param after Limit response to resources created after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources created before a given ISO8601 compliant date. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending (asc as default). (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email address. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @return ApiResponse&lt;List&lt;Customer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Customer>> listAllCustomersWithHttpInfo(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, OffsetDateTime after, OffsetDateTime before, Integer offset, String order, String orderby, String email, String role) throws ApiException {
        okhttp3.Call localVarCall = listAllCustomersValidateBeforeCall(context, page, perPage, search, exclude, include, after, before, offset, order, orderby, email, role, null);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API helps you to view all the customers. (asynchronously)
     * 
     * @param context Scope under which the request is made; determines fields present in response. (optional)
     * @param page Current page of the collection. (optional, default to 1)
     * @param perPage Maximum number of items to be returned in result set. (optional, default to 10)
     * @param search Limit results to those matching a string. (optional)
     * @param exclude Ensure result set excludes specific IDs. (optional)
     * @param include Limit result set to specific IDs. (optional)
     * @param after Limit response to resources created after a given ISO8601 compliant date. (optional)
     * @param before Limit response to resources created before a given ISO8601 compliant date. (optional)
     * @param offset Offset the result set by a specific number of items. (optional)
     * @param order Order sort attribute ascending or descending (asc as default). (optional)
     * @param orderby Sort collection by object attribute. (optional)
     * @param email Limit result set to resources with a specific email address. (optional)
     * @param role Limit result set to resources with a specific role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllCustomersAsync(String context, Integer page, Integer perPage, String search, List<Integer> exclude, List<Integer> include, OffsetDateTime after, OffsetDateTime before, Integer offset, String order, String orderby, String email, String role, final ApiCallback<List<Customer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllCustomersValidateBeforeCall(context, page, perPage, search, exclude, include, after, before, offset, order, orderby, email, role, _callback);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveCustomerById
     * @param customerId ID of customer to return (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified customer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCustomerByIdCall(Integer customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveCustomerByIdValidateBeforeCall(Integer customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling retrieveCustomerById(Async)");
        }

        return retrieveCustomerByIdCall(customerId, _callback);

    }

    /**
     * This API lets you retrieve and view a specific customer by ID.
     * 
     * @param customerId ID of customer to return (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified customer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Customer retrieveCustomerById(Integer customerId) throws ApiException {
        ApiResponse<Customer> localVarResp = retrieveCustomerByIdWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * This API lets you retrieve and view a specific customer by ID.
     * 
     * @param customerId ID of customer to return (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified customer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> retrieveCustomerByIdWithHttpInfo(Integer customerId) throws ApiException {
        okhttp3.Call localVarCall = retrieveCustomerByIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This API lets you retrieve and view a specific customer by ID. (asynchronously)
     * 
     * @param customerId ID of customer to return (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns specified customer. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveCustomerByIdAsync(Integer customerId, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveCustomerByIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
