/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package wtx.woocommerce.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import wtx.woocommerce.api.client.model.Billing;
import wtx.woocommerce.api.client.model.OrderLineItem;
import wtx.woocommerce.api.client.model.Shipping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import wtx.woocommerce.api.client.invoker.JSON;

/**
 * Order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-26T19:20:41.898235500+01:00[Europe/Warsaw]", comments = "Generator version: 7.10.0")
public class Order {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  @javax.annotation.Nullable
  private String number;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DATE_PAID = "date_paid";
  @SerializedName(SERIALIZED_NAME_DATE_PAID)
  @javax.annotation.Nullable
  private OffsetDateTime datePaid;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "date_completed";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  @javax.annotation.Nullable
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private String total;

  public static final String SERIALIZED_NAME_SHIPPING_TOTAL = "shipping_total";
  @SerializedName(SERIALIZED_NAME_SHIPPING_TOTAL)
  @javax.annotation.Nullable
  private String shippingTotal;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_TITLE = "payment_method_title";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_TITLE)
  @javax.annotation.Nullable
  private String paymentMethodTitle;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  @javax.annotation.Nullable
  private Integer customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_NOTE = "customer_note";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NOTE)
  @javax.annotation.Nullable
  private String customerNote;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  @javax.annotation.Nullable
  private Billing billing;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  @javax.annotation.Nullable
  private Shipping shipping;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  @javax.annotation.Nullable
  private List<OrderLineItem> lineItems = new ArrayList<>();

  public Order() {
  }

  public Order id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the resource.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public Order number(@javax.annotation.Nullable String number) {
    this.number = number;
    return this;
  }

  /**
   * Order number.
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(@javax.annotation.Nullable String number) {
    this.number = number;
  }


  public Order status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Order status. Options: pending, processing, on-hold, completed, cancelled, refunded, failed and trash. Default is pending.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }


  public Order dateCreated(@javax.annotation.Nullable OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date the order was created, in the site&#39;s timezone.
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Order dateModified(@javax.annotation.Nullable OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * The date the order was last modified, in the site&#39;s timezone.
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public Order datePaid(@javax.annotation.Nullable OffsetDateTime datePaid) {
    this.datePaid = datePaid;
    return this;
  }

  /**
   * The date the order was paid, in the site&#39;s timezone.
   * @return datePaid
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatePaid() {
    return datePaid;
  }

  public void setDatePaid(@javax.annotation.Nullable OffsetDateTime datePaid) {
    this.datePaid = datePaid;
  }


  public Order dateCompleted(@javax.annotation.Nullable OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * The date the order was completed, in the site&#39;s timezone.
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(@javax.annotation.Nullable OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public Order total(@javax.annotation.Nullable String total) {
    this.total = total;
    return this;
  }

  /**
   * Grand total (purchased products and shipping price).
   * @return total
   */
  @javax.annotation.Nullable
  public String getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable String total) {
    this.total = total;
  }


  public Order shippingTotal(@javax.annotation.Nullable String shippingTotal) {
    this.shippingTotal = shippingTotal;
    return this;
  }

  /**
   * Total shipping amount for the order.
   * @return shippingTotal
   */
  @javax.annotation.Nullable
  public String getShippingTotal() {
    return shippingTotal;
  }

  public void setShippingTotal(@javax.annotation.Nullable String shippingTotal) {
    this.shippingTotal = shippingTotal;
  }


  public Order paymentMethodTitle(@javax.annotation.Nullable String paymentMethodTitle) {
    this.paymentMethodTitle = paymentMethodTitle;
    return this;
  }

  /**
   * Payment method title.
   * @return paymentMethodTitle
   */
  @javax.annotation.Nullable
  public String getPaymentMethodTitle() {
    return paymentMethodTitle;
  }

  public void setPaymentMethodTitle(@javax.annotation.Nullable String paymentMethodTitle) {
    this.paymentMethodTitle = paymentMethodTitle;
  }


  public Order customerId(@javax.annotation.Nullable Integer customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * User ID who owns the order. 0 for guests. Default is 0.
   * @return customerId
   */
  @javax.annotation.Nullable
  public Integer getCustomerId() {
    return customerId;
  }

  public void setCustomerId(@javax.annotation.Nullable Integer customerId) {
    this.customerId = customerId;
  }


  public Order customerNote(@javax.annotation.Nullable String customerNote) {
    this.customerNote = customerNote;
    return this;
  }

  /**
   * Note left by customer during checkout.
   * @return customerNote
   */
  @javax.annotation.Nullable
  public String getCustomerNote() {
    return customerNote;
  }

  public void setCustomerNote(@javax.annotation.Nullable String customerNote) {
    this.customerNote = customerNote;
  }


  public Order billing(@javax.annotation.Nullable Billing billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public Billing getBilling() {
    return billing;
  }

  public void setBilling(@javax.annotation.Nullable Billing billing) {
    this.billing = billing;
  }


  public Order shipping(@javax.annotation.Nullable Shipping shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public Shipping getShipping() {
    return shipping;
  }

  public void setShipping(@javax.annotation.Nullable Shipping shipping) {
    this.shipping = shipping;
  }


  public Order lineItems(@javax.annotation.Nullable List<OrderLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public Order addLineItemsItem(OrderLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Line items data.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<OrderLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(@javax.annotation.Nullable List<OrderLineItem> lineItems) {
    this.lineItems = lineItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.id, order.id) &&
        Objects.equals(this.number, order.number) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.dateCreated, order.dateCreated) &&
        Objects.equals(this.dateModified, order.dateModified) &&
        Objects.equals(this.datePaid, order.datePaid) &&
        Objects.equals(this.dateCompleted, order.dateCompleted) &&
        Objects.equals(this.total, order.total) &&
        Objects.equals(this.shippingTotal, order.shippingTotal) &&
        Objects.equals(this.paymentMethodTitle, order.paymentMethodTitle) &&
        Objects.equals(this.customerId, order.customerId) &&
        Objects.equals(this.customerNote, order.customerNote) &&
        Objects.equals(this.billing, order.billing) &&
        Objects.equals(this.shipping, order.shipping) &&
        Objects.equals(this.lineItems, order.lineItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, number, status, dateCreated, dateModified, datePaid, dateCompleted, total, shippingTotal, paymentMethodTitle, customerId, customerNote, billing, shipping, lineItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    datePaid: ").append(toIndentedString(datePaid)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    shippingTotal: ").append(toIndentedString(shippingTotal)).append("\n");
    sb.append("    paymentMethodTitle: ").append(toIndentedString(paymentMethodTitle)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerNote: ").append(toIndentedString(customerNote)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("number");
    openapiFields.add("status");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("date_paid");
    openapiFields.add("date_completed");
    openapiFields.add("total");
    openapiFields.add("shipping_total");
    openapiFields.add("payment_method_title");
    openapiFields.add("customer_id");
    openapiFields.add("customer_note");
    openapiFields.add("billing");
    openapiFields.add("shipping");
    openapiFields.add("line_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) && !jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
      if ((jsonObj.get("shipping_total") != null && !jsonObj.get("shipping_total").isJsonNull()) && !jsonObj.get("shipping_total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_total").toString()));
      }
      if ((jsonObj.get("payment_method_title") != null && !jsonObj.get("payment_method_title").isJsonNull()) && !jsonObj.get("payment_method_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_title").toString()));
      }
      if ((jsonObj.get("customer_note") != null && !jsonObj.get("customer_note").isJsonNull()) && !jsonObj.get("customer_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_note").toString()));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Billing.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        Shipping.validateJsonElement(jsonObj.get("shipping"));
      }
      if (jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("line_items");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `line_items` to be an array in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
          }

          // validate the optional field `line_items` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            OrderLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

