/*
 * WooCommerce REST API
 * The REST API is a powerful part of WooCommerce which lets you read and write various parts of WooCommerce data such as orders, products, coupons, customers, and shipping zones.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package wtx.woocommerce.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import wtx.woocommerce.api.client.model.ReportSalesSummaryItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import wtx.woocommerce.api.client.invoker.JSON;

/**
 * ReportSalesSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:35:20.422255800+01:00[Europe/Warsaw]", comments = "Generator version: 7.10.0")
public class ReportSalesSummary {
  public static final String SERIALIZED_NAME_TOTAL_SALES = "total_sales";
  @SerializedName(SERIALIZED_NAME_TOTAL_SALES)
  @javax.annotation.Nullable
  private String totalSales;

  public static final String SERIALIZED_NAME_NET_SALES = "net_sales";
  @SerializedName(SERIALIZED_NAME_NET_SALES)
  @javax.annotation.Nullable
  private String netSales;

  public static final String SERIALIZED_NAME_AVERAGE_SALES = "average_sales";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SALES)
  @javax.annotation.Nullable
  private String averageSales;

  public static final String SERIALIZED_NAME_TOTAL_ORDERS = "total_orders";
  @SerializedName(SERIALIZED_NAME_TOTAL_ORDERS)
  @javax.annotation.Nullable
  private Integer totalOrders;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS = "total_items";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS)
  @javax.annotation.Nullable
  private Integer totalItems;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "total_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  @javax.annotation.Nullable
  private String totalTax;

  public static final String SERIALIZED_NAME_TOTAL_SHIPPING = "total_shipping";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHIPPING)
  @javax.annotation.Nullable
  private String totalShipping;

  public static final String SERIALIZED_NAME_TOTAL_REFUNDS = "total_refunds";
  @SerializedName(SERIALIZED_NAME_TOTAL_REFUNDS)
  @javax.annotation.Nullable
  private Integer totalRefunds;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT = "total_discount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT)
  @javax.annotation.Nullable
  private String totalDiscount;

  public static final String SERIALIZED_NAME_TOTALS_GROUPED_BY = "totals_grouped_by";
  @SerializedName(SERIALIZED_NAME_TOTALS_GROUPED_BY)
  @javax.annotation.Nullable
  private String totalsGroupedBy;

  public static final String SERIALIZED_NAME_TOTAL_CUSTOMERS = "total_customers";
  @SerializedName(SERIALIZED_NAME_TOTAL_CUSTOMERS)
  @javax.annotation.Nullable
  private Integer totalCustomers;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  @javax.annotation.Nullable
  private Map<String, ReportSalesSummaryItem> totals = new HashMap<>();

  public ReportSalesSummary() {
  }

  public ReportSalesSummary totalSales(@javax.annotation.Nullable String totalSales) {
    this.totalSales = totalSales;
    return this;
  }

  /**
   * Get totalSales
   * @return totalSales
   */
  @javax.annotation.Nullable
  public String getTotalSales() {
    return totalSales;
  }

  public void setTotalSales(@javax.annotation.Nullable String totalSales) {
    this.totalSales = totalSales;
  }


  public ReportSalesSummary netSales(@javax.annotation.Nullable String netSales) {
    this.netSales = netSales;
    return this;
  }

  /**
   * Get netSales
   * @return netSales
   */
  @javax.annotation.Nullable
  public String getNetSales() {
    return netSales;
  }

  public void setNetSales(@javax.annotation.Nullable String netSales) {
    this.netSales = netSales;
  }


  public ReportSalesSummary averageSales(@javax.annotation.Nullable String averageSales) {
    this.averageSales = averageSales;
    return this;
  }

  /**
   * Get averageSales
   * @return averageSales
   */
  @javax.annotation.Nullable
  public String getAverageSales() {
    return averageSales;
  }

  public void setAverageSales(@javax.annotation.Nullable String averageSales) {
    this.averageSales = averageSales;
  }


  public ReportSalesSummary totalOrders(@javax.annotation.Nullable Integer totalOrders) {
    this.totalOrders = totalOrders;
    return this;
  }

  /**
   * Get totalOrders
   * @return totalOrders
   */
  @javax.annotation.Nullable
  public Integer getTotalOrders() {
    return totalOrders;
  }

  public void setTotalOrders(@javax.annotation.Nullable Integer totalOrders) {
    this.totalOrders = totalOrders;
  }


  public ReportSalesSummary totalItems(@javax.annotation.Nullable Integer totalItems) {
    this.totalItems = totalItems;
    return this;
  }

  /**
   * Get totalItems
   * @return totalItems
   */
  @javax.annotation.Nullable
  public Integer getTotalItems() {
    return totalItems;
  }

  public void setTotalItems(@javax.annotation.Nullable Integer totalItems) {
    this.totalItems = totalItems;
  }


  public ReportSalesSummary totalTax(@javax.annotation.Nullable String totalTax) {
    this.totalTax = totalTax;
    return this;
  }

  /**
   * Get totalTax
   * @return totalTax
   */
  @javax.annotation.Nullable
  public String getTotalTax() {
    return totalTax;
  }

  public void setTotalTax(@javax.annotation.Nullable String totalTax) {
    this.totalTax = totalTax;
  }


  public ReportSalesSummary totalShipping(@javax.annotation.Nullable String totalShipping) {
    this.totalShipping = totalShipping;
    return this;
  }

  /**
   * Get totalShipping
   * @return totalShipping
   */
  @javax.annotation.Nullable
  public String getTotalShipping() {
    return totalShipping;
  }

  public void setTotalShipping(@javax.annotation.Nullable String totalShipping) {
    this.totalShipping = totalShipping;
  }


  public ReportSalesSummary totalRefunds(@javax.annotation.Nullable Integer totalRefunds) {
    this.totalRefunds = totalRefunds;
    return this;
  }

  /**
   * Get totalRefunds
   * @return totalRefunds
   */
  @javax.annotation.Nullable
  public Integer getTotalRefunds() {
    return totalRefunds;
  }

  public void setTotalRefunds(@javax.annotation.Nullable Integer totalRefunds) {
    this.totalRefunds = totalRefunds;
  }


  public ReportSalesSummary totalDiscount(@javax.annotation.Nullable String totalDiscount) {
    this.totalDiscount = totalDiscount;
    return this;
  }

  /**
   * Get totalDiscount
   * @return totalDiscount
   */
  @javax.annotation.Nullable
  public String getTotalDiscount() {
    return totalDiscount;
  }

  public void setTotalDiscount(@javax.annotation.Nullable String totalDiscount) {
    this.totalDiscount = totalDiscount;
  }


  public ReportSalesSummary totalsGroupedBy(@javax.annotation.Nullable String totalsGroupedBy) {
    this.totalsGroupedBy = totalsGroupedBy;
    return this;
  }

  /**
   * Get totalsGroupedBy
   * @return totalsGroupedBy
   */
  @javax.annotation.Nullable
  public String getTotalsGroupedBy() {
    return totalsGroupedBy;
  }

  public void setTotalsGroupedBy(@javax.annotation.Nullable String totalsGroupedBy) {
    this.totalsGroupedBy = totalsGroupedBy;
  }


  public ReportSalesSummary totalCustomers(@javax.annotation.Nullable Integer totalCustomers) {
    this.totalCustomers = totalCustomers;
    return this;
  }

  /**
   * Get totalCustomers
   * @return totalCustomers
   */
  @javax.annotation.Nullable
  public Integer getTotalCustomers() {
    return totalCustomers;
  }

  public void setTotalCustomers(@javax.annotation.Nullable Integer totalCustomers) {
    this.totalCustomers = totalCustomers;
  }


  public ReportSalesSummary totals(@javax.annotation.Nullable Map<String, ReportSalesSummaryItem> totals) {
    this.totals = totals;
    return this;
  }

  public ReportSalesSummary putTotalsItem(String key, ReportSalesSummaryItem totalsItem) {
    if (this.totals == null) {
      this.totals = new HashMap<>();
    }
    this.totals.put(key, totalsItem);
    return this;
  }

  /**
   * Get totals
   * @return totals
   */
  @javax.annotation.Nullable
  public Map<String, ReportSalesSummaryItem> getTotals() {
    return totals;
  }

  public void setTotals(@javax.annotation.Nullable Map<String, ReportSalesSummaryItem> totals) {
    this.totals = totals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSalesSummary reportSalesSummary = (ReportSalesSummary) o;
    return Objects.equals(this.totalSales, reportSalesSummary.totalSales) &&
        Objects.equals(this.netSales, reportSalesSummary.netSales) &&
        Objects.equals(this.averageSales, reportSalesSummary.averageSales) &&
        Objects.equals(this.totalOrders, reportSalesSummary.totalOrders) &&
        Objects.equals(this.totalItems, reportSalesSummary.totalItems) &&
        Objects.equals(this.totalTax, reportSalesSummary.totalTax) &&
        Objects.equals(this.totalShipping, reportSalesSummary.totalShipping) &&
        Objects.equals(this.totalRefunds, reportSalesSummary.totalRefunds) &&
        Objects.equals(this.totalDiscount, reportSalesSummary.totalDiscount) &&
        Objects.equals(this.totalsGroupedBy, reportSalesSummary.totalsGroupedBy) &&
        Objects.equals(this.totalCustomers, reportSalesSummary.totalCustomers) &&
        Objects.equals(this.totals, reportSalesSummary.totals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalSales, netSales, averageSales, totalOrders, totalItems, totalTax, totalShipping, totalRefunds, totalDiscount, totalsGroupedBy, totalCustomers, totals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSalesSummary {\n");
    sb.append("    totalSales: ").append(toIndentedString(totalSales)).append("\n");
    sb.append("    netSales: ").append(toIndentedString(netSales)).append("\n");
    sb.append("    averageSales: ").append(toIndentedString(averageSales)).append("\n");
    sb.append("    totalOrders: ").append(toIndentedString(totalOrders)).append("\n");
    sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    totalShipping: ").append(toIndentedString(totalShipping)).append("\n");
    sb.append("    totalRefunds: ").append(toIndentedString(totalRefunds)).append("\n");
    sb.append("    totalDiscount: ").append(toIndentedString(totalDiscount)).append("\n");
    sb.append("    totalsGroupedBy: ").append(toIndentedString(totalsGroupedBy)).append("\n");
    sb.append("    totalCustomers: ").append(toIndentedString(totalCustomers)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_sales");
    openapiFields.add("net_sales");
    openapiFields.add("average_sales");
    openapiFields.add("total_orders");
    openapiFields.add("total_items");
    openapiFields.add("total_tax");
    openapiFields.add("total_shipping");
    openapiFields.add("total_refunds");
    openapiFields.add("total_discount");
    openapiFields.add("totals_grouped_by");
    openapiFields.add("total_customers");
    openapiFields.add("totals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportSalesSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportSalesSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSalesSummary is not found in the empty JSON string", ReportSalesSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportSalesSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportSalesSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("total_sales") != null && !jsonObj.get("total_sales").isJsonNull()) && !jsonObj.get("total_sales").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_sales` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_sales").toString()));
      }
      if ((jsonObj.get("net_sales") != null && !jsonObj.get("net_sales").isJsonNull()) && !jsonObj.get("net_sales").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_sales` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_sales").toString()));
      }
      if ((jsonObj.get("average_sales") != null && !jsonObj.get("average_sales").isJsonNull()) && !jsonObj.get("average_sales").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `average_sales` to be a primitive type in the JSON string but got `%s`", jsonObj.get("average_sales").toString()));
      }
      if ((jsonObj.get("total_tax") != null && !jsonObj.get("total_tax").isJsonNull()) && !jsonObj.get("total_tax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_tax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_tax").toString()));
      }
      if ((jsonObj.get("total_shipping") != null && !jsonObj.get("total_shipping").isJsonNull()) && !jsonObj.get("total_shipping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_shipping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_shipping").toString()));
      }
      if ((jsonObj.get("total_discount") != null && !jsonObj.get("total_discount").isJsonNull()) && !jsonObj.get("total_discount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_discount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_discount").toString()));
      }
      if ((jsonObj.get("totals_grouped_by") != null && !jsonObj.get("totals_grouped_by").isJsonNull()) && !jsonObj.get("totals_grouped_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totals_grouped_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totals_grouped_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSalesSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSalesSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSalesSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSalesSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSalesSummary>() {
           @Override
           public void write(JsonWriter out, ReportSalesSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSalesSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportSalesSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportSalesSummary
   * @throws IOException if the JSON string is invalid with respect to ReportSalesSummary
   */
  public static ReportSalesSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSalesSummary.class);
  }

  /**
   * Convert an instance of ReportSalesSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

